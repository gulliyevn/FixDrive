// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —É—Ä–æ–≤–Ω–µ–π –∏ VIP
console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¶–ï–ù–ê–†–ò–ï–í –£–†–û–í–ù–ï–ô –ò VIP\n');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π (–∫–æ–ø–∏—è –∏–∑ levels.config.ts)
const LEVELS_CONFIG = {
  "1.1": { levelKey: "starter", subLevel: 1, icon: "ü•â", bonus: 2, maxProgress: 30 },
  "1.2": { levelKey: "starter", subLevel: 2, icon: "ü•â", bonus: 3, maxProgress: 40 },
  "1.3": { levelKey: "starter", subLevel: 3, icon: "ü•â", bonus: 5, maxProgress: 50 },
  "2.1": { levelKey: "determined", subLevel: 1, icon: "ü•à", bonus: 8, maxProgress: 60 },
  "2.2": { levelKey: "determined", subLevel: 2, icon: "ü•à", bonus: 10, maxProgress: 80 },
  "2.3": { levelKey: "determined", subLevel: 3, icon: "ü•à", bonus: 15, maxProgress: 100 },
  "3.1": { levelKey: "reliable", subLevel: 1, icon: "ü•á", bonus: 20, maxProgress: 120 },
  "3.2": { levelKey: "reliable", subLevel: 2, icon: "ü•á", bonus: 25, maxProgress: 150 },
  "3.3": { levelKey: "reliable", subLevel: 3, icon: "ü•á", bonus: 35, maxProgress: 180 },
  "4.1": { levelKey: "champion", subLevel: 1, icon: "üèÜ", bonus: 50, maxProgress: 210 },
  "4.2": { levelKey: "champion", subLevel: 2, icon: "üèÜ", bonus: 65, maxProgress: 250 },
  "4.3": { levelKey: "champion", subLevel: 3, icon: "üèÜ", bonus: 85, maxProgress: 290 },
  "5.1": { levelKey: "superstar", subLevel: 1, icon: "‚≠ê", bonus: 120, maxProgress: 330 },
  "5.2": { levelKey: "superstar", subLevel: 2, icon: "‚≠ê", bonus: 150, maxProgress: 380 },
  "5.3": { levelKey: "superstar", subLevel: 3, icon: "‚≠ê", bonus: 200, maxProgress: 430 },
  "6.1": { levelKey: "emperor", subLevel: 1, icon: "üëë", bonus: 300, maxProgress: 480 },
  "6.2": { levelKey: "emperor", subLevel: 2, icon: "üëë", bonus: 400, maxProgress: 540 },
  "6.3": { levelKey: "emperor", subLevel: 3, icon: "üëë", bonus: 500, maxProgress: 600 },
};

const VIP_CONFIG = {
  levelKey: "vip",
  icon: "üíé",
  minRidesPerDay: 3,
  monthlyBonuses: { days20: 50, days25: 75, days30: 100 },
  quarterlyBonuses: { months3: 200, months6: 500, months12: 1000 },
  minDaysPerMonth: 20,
};

// –§—É–Ω–∫—Ü–∏–∏
const getLevelConfig = (level, subLevel) => {
  const key = `${level}.${subLevel}`;
  return LEVELS_CONFIG[key] || LEVELS_CONFIG["1.1"];
};

const isVIPLevel = (totalRides) => {
  return totalRides >= 4320;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –∏ –ø–æ–¥—É—Ä–æ–≤–Ω—è (–∫–æ–ø–∏—è –∏–∑ useEarningsLevel)
const calculateLevelAndSubLevel = (totalRides) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP —Å—Ç–∞—Ç—É—Å (4320+ –ø–æ–µ–∑–¥–æ–∫)
  if (isVIPLevel(totalRides)) {
    return {
      level: 7, // VIP —É—Ä–æ–≤–µ–Ω—å
      subLevel: 1,
      maxProgress: VIP_CONFIG.minDaysPerMonth,
      title: 'vip',
      subLevelTitle: 'VIP 1',
      icon: VIP_CONFIG.icon,
      nextReward: VIP_CONFIG.monthlyBonuses.days20.toString(),
    };
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –ø–æ–¥—É—Ä–æ–≤–µ–Ω—å –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–µ–∑–¥–æ–∫
  let accumulatedRides = 0;
  
  for (let level = 1; level <= 6; level++) {
    for (let subLevel = 1; subLevel <= 3; subLevel++) {
      const config = getLevelConfig(level, subLevel);
      const ridesInThisSubLevel = config.maxProgress;
      
      if (totalRides < accumulatedRides + ridesInThisSubLevel) {
        // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π –ø–æ–¥—É—Ä–æ–≤–µ–Ω—å
        const progressInSubLevel = totalRides - accumulatedRides;
        
        return {
          level,
          subLevel,
          maxProgress: ridesInThisSubLevel,
          title: config.levelKey,
          subLevelTitle: `${config.levelKey} ${subLevel}`,
          icon: config.icon,
          nextReward: config.bonus.toString(),
        };
      }
      
      accumulatedRides += ridesInThisSubLevel;
    }
  }
  
  // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
  const maxConfig = getLevelConfig(6, 3);
  return {
    level: 6,
    subLevel: 3,
    maxProgress: maxConfig.maxProgress,
    title: maxConfig.levelKey,
    subLevelTitle: `${maxConfig.levelKey} 3`,
    icon: maxConfig.icon,
    nextReward: maxConfig.bonus.toString(),
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–µ–∑–¥–æ–∫
const getTotalRidesForLevel = (level, subLevel, progress) => {
  let totalRides = 0;
  
  // –°—É–º–º–∏—Ä—É–µ–º –ø–æ–µ–∑–¥–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
  for (let l = 1; l < level; l++) {
    for (let s = 1; s <= 3; s++) {
      const config = getLevelConfig(l, s);
      totalRides += config.maxProgress;
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–µ–∑–¥–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–¥—É—Ä–æ–≤–Ω–µ–π —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  for (let s = 1; s < subLevel; s++) {
    const config = getLevelConfig(level, s);
    totalRides += config.maxProgress;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–¥—É—Ä–æ–≤–Ω–µ
  totalRides += progress;
  
  return totalRides;
};

console.log('üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –£–†–û–í–ù–ï–ô:');
Object.entries(LEVELS_CONFIG).forEach(([key, config]) => {
  console.log(`${key}: ${config.maxProgress} –ø–æ–µ–∑–¥–æ–∫, –±–æ–Ω—É—Å ${config.bonus} AFc`);
});

console.log('\nüéØ –°–¶–ï–ù–ê–†–ò–ô 1: –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è–º —É—Ä–æ–≤–Ω—è 1');
console.log('='.repeat(50));

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –≤ —É—Ä–æ–≤–Ω–µ 1
const level1Tests = [0, 29, 30, 69, 70, 119, 120];
level1Tests.forEach(rides => {
  const result = calculateLevelAndSubLevel(rides);
  const progress = rides < 30 ? rides : rides < 70 ? rides - 30 : rides - 70;
  console.log(`${rides.toString().padStart(3)} –ø–æ–µ–∑–¥–æ–∫: –£—Ä–æ–≤–µ–Ω—å ${result.level}.${result.subLevel}, –ø—Ä–æ–≥—Ä–µ—Å—Å ${progress}/${result.maxProgress}`);
});

console.log('\nüéØ –°–¶–ï–ù–ê–†–ò–ô 2: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 2');
console.log('='.repeat(50));

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 2
const level2Tests = [120, 121, 179, 180, 239, 240];
level2Tests.forEach(rides => {
  const result = calculateLevelAndSubLevel(rides);
  const progress = rides < 180 ? rides - 120 : rides < 240 ? rides - 180 : rides - 240;
  console.log(`${rides.toString().padStart(3)} –ø–æ–µ–∑–¥–æ–∫: –£—Ä–æ–≤–µ–Ω—å ${result.level}.${result.subLevel}, –ø—Ä–æ–≥—Ä–µ—Å—Å ${progress}/${result.maxProgress}`);
});

console.log('\nüéØ –°–¶–ï–ù–ê–†–ò–ô 3: VIP –∞–∫—Ç–∏–≤–∞—Ü–∏—è');
console.log('='.repeat(50));

// –¢–µ—Å—Ç–∏—Ä—É–µ–º VIP –∞–∫—Ç–∏–≤–∞—Ü–∏—é
const vipTests = [4319, 4320, 4321, 5000];
vipTests.forEach(rides => {
  const result = calculateLevelAndSubLevel(rides);
  console.log(`${rides.toString().padStart(4)} –ø–æ–µ–∑–¥–æ–∫: ${result.level === 7 ? 'VIP –ê–ö–¢–ò–í–ò–†–û–í–ê–ù' : `–£—Ä–æ–≤–µ–Ω—å ${result.level}.${result.subLevel}`}`);
});

console.log('\nüéØ –°–¶–ï–ù–ê–†–ò–ô 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö');
console.log('='.repeat(50));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö
const bonusTests = [
  { rides: 29, expectedBonus: 2, description: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ 1.1' },
  { rides: 69, expectedBonus: 3, description: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ 1.2' },
  { rides: 119, expectedBonus: 5, description: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ 1.3' },
  { rides: 179, expectedBonus: 8, description: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ 2.1' },
];

bonusTests.forEach(test => {
  const result = calculateLevelAndSubLevel(test.rides);
  const config = getLevelConfig(result.level, result.subLevel);
  console.log(`${test.description}: ${test.rides} –ø–æ–µ–∑–¥–æ–∫ ‚Üí –±–æ–Ω—É—Å ${config.bonus} AFc (–æ–∂–∏–¥–∞–ª–æ—Å—å ${test.expectedBonus})`);
});

console.log('\nüéØ –°–¶–ï–ù–ê–†–ò–ô 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ getTotalRidesForLevel');
console.log('='.repeat(50));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getTotalRidesForLevel
const totalRidesTests = [
  { level: 1, subLevel: 1, progress: 15, expected: 15 },
  { level: 1, subLevel: 2, progress: 20, expected: 50 },
  { level: 2, subLevel: 1, progress: 30, expected: 150 },
];

totalRidesTests.forEach(test => {
  const total = getTotalRidesForLevel(test.level, test.subLevel, test.progress);
  console.log(`–£—Ä–æ–≤–µ–Ω—å ${test.level}.${test.subLevel}, –ø—Ä–æ–≥—Ä–µ—Å—Å ${test.progress}: ${total} –ø–æ–µ–∑–¥–æ–∫ (–æ–∂–∏–¥–∞–ª–æ—Å—å ${test.expected})`);
});

console.log('\nüéØ –°–¶–ï–ù–ê–†–ò–ô 6: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤');
console.log('='.repeat(50));

// –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
for (let rides = 0; rides <= 150; rides += 10) {
  const result = calculateLevelAndSubLevel(rides);
  const total = getTotalRidesForLevel(result.level, result.subLevel, 0);
  console.log(`${rides.toString().padStart(3)} –ø–æ–µ–∑–¥–æ–∫ ‚Üí –£—Ä–æ–≤–µ–Ω—å ${result.level}.${result.subLevel} (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ${total} –ø–æ–µ–∑–¥–æ–∫)`);
}

console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
