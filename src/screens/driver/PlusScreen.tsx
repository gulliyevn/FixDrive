import React, { useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  TouchableOpacity, 
  Alert,
  ScrollView
} from 'react-native';
import { useAuth } from '../../context/AuthContext';
import { useTheme } from '../../context/ThemeContext';

const PlusScreen: React.FC = () => {
  const { logout } = useAuth();
  const { isDark } = useTheme();
  const [isOnline, setIsOnline] = useState(true);

  const handleLogout = () => {
    Alert.alert(
      '–í—ã—Ö–æ–¥',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        { text: '–í—ã–π—Ç–∏', onPress: logout, style: 'destructive' }
      ]
    );
  };

  const handleToggleOnline = () => {
    setIsOnline(!isOnline);
    Alert.alert(
      isOnline ? '–û—Ñ–ª–∞–π–Ω' : '–û–Ω–ª–∞–π–Ω',
      isOnline ? '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º' : '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º'
    );
  };

  const handleQuickActions = (action: string) => {
    Alert.alert(action, '–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
  };

  const quickActions = [
    { icon: 'üöó', title: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', action: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', color: '#007AFF' },
    { icon: 'üìä', title: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', action: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', color: '#34C759' },
    { icon: 'üí∞', title: '–ó–∞—Ä–∞–±–æ—Ç–æ–∫', action: '–ó–∞—Ä–∞–±–æ—Ç–æ–∫', color: '#FF9500' },
    { icon: '‚öôÔ∏è', title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', action: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', color: '#8E8E93' },
  ];

  return (
    <ScrollView style={[styles.container, { backgroundColor: isDark ? '#000' : '#f5f5f5' }]}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <View style={[styles.header, { backgroundColor: isDark ? '#333' : '#fff' }]}>
        <Text style={[styles.headerTitle, { color: isDark ? '#fff' : '#000' }]}>
          –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        </Text>
        <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
          <Text style={styles.logoutButtonText}>–í—ã–π—Ç–∏</Text>
        </TouchableOpacity>
      </View>

      {/* –°—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è */}
      <View style={[styles.statusContainer, { backgroundColor: isDark ? '#333' : '#fff' }]}>
        <View style={styles.statusInfo}>
          <View style={[styles.statusIndicator, { backgroundColor: isOnline ? '#4CAF50' : '#FF5722' }]} />
          <Text style={[styles.statusText, { color: isDark ? '#fff' : '#000' }]}>
            {isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}
          </Text>
        </View>
        <TouchableOpacity 
          style={[styles.toggleButton, { backgroundColor: isOnline ? '#FF5722' : '#4CAF50' }]}
          onPress={handleToggleOnline}
        >
          <Text style={styles.toggleButtonText}>
            {isOnline ? '–ü–µ—Ä–µ–π—Ç–∏ –≤ –æ—Ñ–ª–∞–π–Ω' : '–ü–µ—Ä–µ–π—Ç–∏ –≤ –æ–Ω–ª–∞–π–Ω'}
          </Text>
        </TouchableOpacity>
      </View>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <View style={[styles.actionsContainer, { backgroundColor: isDark ? '#333' : '#fff' }]}>
        <Text style={[styles.sectionTitle, { color: isDark ? '#fff' : '#000' }]}>
          –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        </Text>
        
        <View style={styles.actionsGrid}>
          {quickActions.map((item, index) => (
            <TouchableOpacity
              key={index}
              style={[styles.actionCard, { backgroundColor: isDark ? '#555' : '#f0f0f0' }]}
              onPress={() => handleQuickActions(item.action)}
            >
              <Text style={[styles.actionIcon, { color: item.color }]}>
                {item.icon}
              </Text>
              <Text style={[styles.actionTitle, { color: isDark ? '#fff' : '#000' }]}>
                {item.title}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ */}
      <View style={[styles.optionsContainer, { backgroundColor: isDark ? '#333' : '#fff' }]}>
        <Text style={[styles.sectionTitle, { color: isDark ? '#fff' : '#000' }]}>
          –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        </Text>
        
        <TouchableOpacity style={styles.optionItem}>
          <Text style={[styles.optionText, { color: isDark ? '#fff' : '#000' }]}>
            üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞
          </Text>
          <Text style={[styles.optionArrow, { color: isDark ? '#ccc' : '#666' }]}>‚Ä∫</Text>
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.optionItem}>
          <Text style={[styles.optionText, { color: isDark ? '#fff' : '#000' }]}>
            üìã –î–æ–∫—É–º–µ–Ω—Ç—ã
          </Text>
          <Text style={[styles.optionArrow, { color: isDark ? '#ccc' : '#666' }]}>‚Ä∫</Text>
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.optionItem}>
          <Text style={[styles.optionText, { color: isDark ? '#fff' : '#000' }]}>
            üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å
          </Text>
          <Text style={[styles.optionArrow, { color: isDark ? '#ccc' : '#666' }]}>‚Ä∫</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  logoutButton: {
    backgroundColor: '#FF3B30',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 6,
  },
  logoutButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  statusContainer: {
    margin: 15,
    padding: 20,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  statusInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
  },
  statusIndicator: {
    width: 12,
    height: 12,
    borderRadius: 6,
    marginRight: 10,
  },
  statusText: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  toggleButton: {
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  toggleButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  actionsContainer: {
    margin: 15,
    marginTop: 0,
    padding: 20,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
  },
  actionsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  actionCard: {
    width: '48%',
    padding: 20,
    borderRadius: 12,
    alignItems: 'center',
    marginBottom: 15,
  },
  actionIcon: {
    fontSize: 32,
    marginBottom: 10,
  },
  actionTitle: {
    fontSize: 14,
    fontWeight: '600',
    textAlign: 'center',
  },
  optionsContainer: {
    margin: 15,
    marginTop: 0,
    padding: 20,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  optionItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  optionText: {
    fontSize: 16,
    fontWeight: '500',
  },
  optionArrow: {
    fontSize: 18,
    fontWeight: 'bold',
  },
});

export default PlusScreen; 