import React, { useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  TextInput, 
  TouchableOpacity, 
  Alert,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  SafeAreaView,
  Modal,
  Linking
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { useTheme } from '../../context/ThemeContext';
import Validators, { PasswordStrength } from '../../utils/validators';
import ErrorDisplay from '../../components/ErrorDisplay';
import PasswordStrengthIndicator from '../../components/PasswordStrengthIndicator';
import { AppError, ErrorHandler } from '../../utils/errorHandler';
import SocialAuthService from '../../services/SocialAuthService';
import SocialAuthButtons from '../../components/SocialAuthButtons';
import { useAuth } from '../../context/AuthContext';
import AuthService from '../../services/AuthService';

interface ClientRegisterScreenProps {
  navigation: any;
}

const ClientRegisterScreen: React.FC<ClientRegisterScreenProps> = ({ navigation }) => {
  const { isDark } = useTheme();
  const { login } = useAuth();
  const [formData, setFormData] = useState({
    name: '',
    surname: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [agreeToTerms, setAgreeToTerms] = useState(false);
  const [agreeToPrivacy, setAgreeToPrivacy] = useState(false);
  const [showTermsModal, setShowTermsModal] = useState(false);
  const [showPrivacyModal, setShowPrivacyModal] = useState(false);
  const [error, setError] = useState<AppError | null>(null);
  const [validationErrors, setValidationErrors] = useState<{ [key: string]: string }>({});
  const [passwordStrength, setPasswordStrength] = useState<PasswordStrength | null>(null);

  const validateForm = (): boolean => {
    const validation = Validators.validateClientRegistration(formData);
    const errors: { [key: string]: string } = {};
    
    if (validation.errors.length > 0) {
      validation.errors.forEach(error => {
        if (error.includes('–ò–º—è')) errors.name = error;
        if (error.includes('–§–∞–º–∏–ª–∏—è')) errors.surname = error;
        if (error.includes('email') || error.includes('Email')) errors.email = error;
        if (error.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') || error.includes('–¢–µ–ª–µ—Ñ–æ–Ω')) errors.phone = error;
        if (error.includes('–ø–∞—Ä–æ–ª—å') || error.includes('–ü–∞—Ä–æ–ª—å')) errors.password = error;
        if (error.includes('—Å–æ–≤–ø–∞–¥–∞—é—Ç')) errors.confirmPassword = error;
      });
    }
    
    setValidationErrors(errors);
    setError(null);
    return validation.isValid;
  };

  const handlePasswordChange = (password: string) => {
    setFormData(prev => ({ ...prev, password }));
    setPasswordStrength(Validators.getPasswordStrength(password));
    if (validationErrors.password) {
      setValidationErrors(prev => ({ ...prev, password: '' }));
    }
  };

  const handleRegister = async () => {
    if (!validateForm()) {
      return;
    }

    if (!agreeToTerms || !agreeToPrivacy) {
      setError(ErrorHandler.createError(
        ErrorHandler.VALIDATION_ERRORS.MISSING_FIELDS,
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏',
        '–û—Ç–º–µ—Ç—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ–≥–ª–∞—Å–∏—è'
      ));
      return;
    }

    setIsLoading(true);
    setError(null);
    
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω OTP –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      navigation.navigate('OTPVerification' as never, {
        phoneNumber: formData.phone,
        userRole: 'client',
        userData: { 
          name: formData.name, 
          surname: formData.surname, 
          email: formData.email, 
          phone: formData.phone,
          password: formData.password
        },
      } as never);
    } catch (error) {
      const appError = ErrorHandler.handleAuthError(error);
      setError(appError);
      ErrorHandler.logError(appError, 'ClientRegisterScreen');
    } finally {
      setIsLoading(false);
    }
  };

  const handleRetry = () => {
    handleRegister();
  };

  const handleAction = (action: string) => {
    switch (action) {
      case '–í–æ–π—Ç–∏':
        navigation.navigate('Login');
        break;
      case '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
        setError(null);
        break;
    }
  };

  const updateFormData = (field: keyof typeof formData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleGoogleRegister = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const result = await SocialAuthService.signInWithGoogle();
      
      if (result.success && result.user) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userExists = await checkUserExists(result.user.email);
        
        if (userExists) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
          console.log('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥');
          await login(result.user.email, 'SecurePass123!', 'google_auth');
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
          console.log('üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
          await registerSocialUser(result.user);
        }
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google');
      }
      
    } catch (error) {
      const appError = ErrorHandler.createError(
        ErrorHandler.AUTH_ERRORS.INVALID_CREDENTIALS,
        '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      );
      setError(appError);
    } finally {
      setIsLoading(false);
    }
  };

  const handleFacebookRegister = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const result = await SocialAuthService.signInWithFacebook();
      
      if (result.success && result.user) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userExists = await checkUserExists(result.user.email);
        
        if (userExists) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
          console.log('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥');
          await login(result.user.email, 'SecurePass123!', 'facebook_auth');
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
          console.log('üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
          await registerSocialUser(result.user);
        }
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Facebook');
      }
      
    } catch (error) {
      const appError = ErrorHandler.createError(
        ErrorHandler.AUTH_ERRORS.INVALID_CREDENTIALS,
        '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Facebook',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      );
      setError(appError);
    } finally {
      setIsLoading(false);
    }
  };

  const handleAppleRegister = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const result = await SocialAuthService.signInWithApple();
      
      if (result.success && result.user) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userExists = await checkUserExists(result.user.email);
        
        if (userExists) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
          console.log('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥');
          await login(result.user.email, 'SecurePass123!', 'apple_auth');
        } else {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
          console.log('üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
          await registerSocialUser(result.user);
        }
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Apple');
      }
      
    } catch (error) {
      const appError = ErrorHandler.createError(
        ErrorHandler.AUTH_ERRORS.INVALID_CREDENTIALS,
        '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Apple',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      );
      setError(appError);
    } finally {
      setIsLoading(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const checkUserExists = async (email: string): Promise<boolean> => {
    return await AuthService.checkUserExists(email);
  };

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const registerSocialUser = async (socialUser: any) => {
    try {
      const result = await AuthService.registerWithSocial(socialUser);
      
      // –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏—Ç –≤ —Å–∏—Å—Ç–µ–º—É
      console.log('‚úÖ –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', {
        provider: socialUser.provider,
        email: socialUser.email
      });
      
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
      // navigation.navigate('Main');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  };

  const handleQuickFill = () => {
    setFormData({
      name: 'Nicat',
      surname: 'Quliyev',
      email: 'client@fixdrive.com',
      phone: '+994516995513',
      password: 'password123',
      confirmPassword: 'password123'
    });
  };

  const handleSupportChat = () => {
    const whatsappNumber = '+994516995513';
    const message = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ FixDrive.';
    const whatsappUrl = `whatsapp://send?phone=${whatsappNumber}&text=${encodeURIComponent(message)}`;
    
    Linking.canOpenURL(whatsappUrl)
      .then((supported) => {
        if (supported) {
          return Linking.openURL(whatsappUrl);
        } else {
          // Fallback to web WhatsApp
          const webWhatsappUrl = `https://wa.me/${whatsappNumber.replace('+', '')}?text=${encodeURIComponent(message)}`;
          return Linking.openURL(webWhatsappUrl);
        }
      })
      .catch((err) => {
        console.error('Error opening WhatsApp:', err);
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å WhatsApp. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +994516995513');
      });
  };



  return (
    <SafeAreaView style={[styles.container, isDark && styles.containerDark]}>
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardView}
      >
        <ScrollView contentContainerStyle={styles.scrollContent}>
          {/* Header */}
          <View style={styles.header}>
            <TouchableOpacity 
              style={styles.backButton}
              onPress={() => navigation.goBack()}
            >
              <Ionicons 
                name="arrow-back" 
                size={24} 
                color={isDark ? '#F9FAFB' : '#111827'} 
              />
            </TouchableOpacity>
            <View style={[styles.logoContainer, isDark && styles.logoContainerDark]}>
              <Ionicons name="person-add" size={48} color="#1E3A8A" />
            </View>
            <Text style={[styles.title, isDark && styles.titleDark]}>
              –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            </Text>
            <Text style={[styles.subtitle, isDark && styles.subtitleDark]}>
              –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ–µ–∑–¥–æ–∫
            </Text>
          </View>

          {/* Form */}
          <View style={styles.form}>
            <View style={styles.inputRow}>
              <View style={[styles.inputContainer, { flex: 1, marginRight: 8 }, isDark && styles.inputContainerDark]}>
                <Ionicons 
                  name="person-outline" 
                  size={20} 
                  color={isDark ? '#9CA3AF' : '#666'} 
                  style={styles.inputIcon} 
                />
                <TextInput
                  style={[styles.input, isDark && styles.inputDark]}
                  placeholder="–ò–º—è"
                  value={formData.name}
                  onChangeText={(value) => {
                    updateFormData('name', value);
                    if (validationErrors.name) {
                      setValidationErrors(prev => ({ ...prev, name: '' }));
                    }
                  }}
                  placeholderTextColor={isDark ? '#6B7280' : '#999'}
                />
              </View>
              <View style={[styles.inputContainer, { flex: 1, marginLeft: 8 }, isDark && styles.inputContainerDark]}>
                <Ionicons 
                  name="person-outline" 
                  size={20} 
                  color={isDark ? '#9CA3AF' : '#666'} 
                  style={styles.inputIcon} 
                />
                <TextInput
                  style={[styles.input, isDark && styles.inputDark]}
                  placeholder="–§–∞–º–∏–ª–∏—è"
                  value={formData.surname}
                  onChangeText={(value) => {
                    updateFormData('surname', value);
                    if (validationErrors.surname) {
                      setValidationErrors(prev => ({ ...prev, surname: '' }));
                    }
                  }}
                  placeholderTextColor={isDark ? '#6B7280' : '#999'}
                />
              </View>
            </View>
            {(validationErrors.name || validationErrors.surname) && (
              <View style={styles.errorRow}>
                {validationErrors.name && <Text style={styles.errorText}>{validationErrors.name}</Text>}
                {validationErrors.surname && <Text style={styles.errorText}>{validationErrors.surname}</Text>}
              </View>
            )}

            <View style={[styles.inputContainer, isDark && styles.inputContainerDark]}>
              <Ionicons 
                name="mail-outline" 
                size={20} 
                color={isDark ? '#9CA3AF' : '#666'} 
                style={styles.inputIcon} 
              />
              <TextInput
                style={[styles.input, isDark && styles.inputDark]}
                placeholder="Email"
                value={formData.email}
                onChangeText={(value) => {
                  updateFormData('email', value);
                  if (validationErrors.email) {
                    setValidationErrors(prev => ({ ...prev, email: '' }));
                  }
                }}
                keyboardType="email-address"
                autoCapitalize="none"
                placeholderTextColor={isDark ? '#6B7280' : '#999'}
              />
            </View>
            {validationErrors.email && (
              <Text style={styles.errorText}>{validationErrors.email}</Text>
            )}

            <View style={[styles.inputContainer, isDark && styles.inputContainerDark]}>
              <Ionicons 
                name="call-outline" 
                size={20} 
                color={isDark ? '#9CA3AF' : '#666'} 
                style={styles.inputIcon} 
              />
              <TextInput
                style={[styles.input, isDark && styles.inputDark]}
                placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
                value={formData.phone}
                onChangeText={(value) => {
                  updateFormData('phone', value);
                  if (validationErrors.phone) {
                    setValidationErrors(prev => ({ ...prev, phone: '' }));
                  }
                }}
                keyboardType="phone-pad"
                placeholderTextColor={isDark ? '#6B7280' : '#999'}
              />
            </View>
            {validationErrors.phone && (
              <Text style={styles.errorText}>{validationErrors.phone}</Text>
            )}

            <View style={[styles.inputContainer, isDark && styles.inputContainerDark]}>
              <Ionicons 
                name="lock-closed-outline" 
                size={20} 
                color={isDark ? '#9CA3AF' : '#666'} 
                style={styles.inputIcon} 
              />
              <TextInput
                style={[styles.input, isDark && styles.inputDark]}
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={formData.password}
                onChangeText={handlePasswordChange}
                secureTextEntry={!showPassword}
                placeholderTextColor={isDark ? '#6B7280' : '#999'}
              />
              <TouchableOpacity 
                style={styles.eyeButton}
                onPress={() => setShowPassword(!showPassword)}
              >
                <Ionicons 
                  name={showPassword ? "eye-off-outline" : "eye-outline"} 
                  size={20} 
                  color={isDark ? '#9CA3AF' : '#666'} 
                />
              </TouchableOpacity>
            </View>
            {passwordStrength && (
              <PasswordStrengthIndicator
                strength={passwordStrength}
                showFeedback={true}
              />
            )}
            {validationErrors.password && (
              <Text style={styles.errorText}>{validationErrors.password}</Text>
            )}

            <View style={[styles.inputContainer, isDark && styles.inputContainerDark]}>
              <Ionicons 
                name="lock-closed-outline" 
                size={20} 
                color={isDark ? '#9CA3AF' : '#666'} 
                style={styles.inputIcon} 
              />
              <TextInput
                style={[styles.input, isDark && styles.inputDark]}
                placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                value={formData.confirmPassword}
                onChangeText={(value) => {
                  updateFormData('confirmPassword', value);
                  if (validationErrors.confirmPassword) {
                    setValidationErrors(prev => ({ ...prev, confirmPassword: '' }));
                  }
                }}
                secureTextEntry={!showConfirmPassword}
                placeholderTextColor={isDark ? '#6B7280' : '#999'}
              />
              <TouchableOpacity 
                style={styles.eyeButton}
                onPress={() => setShowConfirmPassword(!showConfirmPassword)}
              >
                <Ionicons 
                  name={showConfirmPassword ? "eye-off-outline" : "eye-outline"} 
                  size={20} 
                  color={isDark ? '#9CA3AF' : '#666'} 
                />
              </TouchableOpacity>
            </View>
            {validationErrors.confirmPassword && (
              <Text style={styles.errorText}>{validationErrors.confirmPassword}</Text>
            )}

            {/* Agreement Checkbox */}
            <View style={styles.agreementSection}>
              <TouchableOpacity 
                style={styles.checkboxContainer}
                onPress={() => {
                  const newValue = !(agreeToTerms && agreeToPrivacy);
                  setAgreeToTerms(newValue);
                  setAgreeToPrivacy(newValue);
                }}
              >
                <View style={[styles.checkbox, (agreeToTerms && agreeToPrivacy) && styles.checkboxChecked]}>
                  {(agreeToTerms && agreeToPrivacy) && <Ionicons name="checkmark" size={16} color="#fff" />}
                </View>
                <Text style={[styles.checkboxText, isDark && styles.checkboxTextDark]}>
                  –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å{' '}
                  <Text 
                    style={[styles.linkText, styles.underlineText]}
                    onPress={(e) => {
                      e.stopPropagation();
                      setShowTermsModal(true);
                    }}
                  >
                    –£—Å–ª–æ–≤–∏—è–º–∏
                  </Text>
                  {' '}–∏{' '}
                  <Text 
                    style={[styles.linkText, styles.underlineText]}
                    onPress={(e) => {
                      e.stopPropagation();
                      setShowPrivacyModal(true);
                    }}
                  >
                    –ü–æ–ª–∏—Ç–∏–∫–æ–π –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                  </Text>
                </Text>
              </TouchableOpacity>
            </View>

            {/* Error Display */}
            <ErrorDisplay
              error={error}
              onRetry={handleRetry}
              onAction={handleAction}
              showDetails={__DEV__}
            />

            {/* Register Button */}
            <TouchableOpacity 
              style={[
                styles.registerButton, 
                styles.clientRegisterButton,
                isLoading && styles.registerButtonDisabled,
                (!agreeToTerms || !agreeToPrivacy) && styles.registerButtonDisabled
              ]} 
              onPress={handleRegister}
              disabled={isLoading || !agreeToTerms || !agreeToPrivacy}
            >
              <Text style={styles.registerButtonText}>
                {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...' : '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'}
              </Text>
              {!isLoading && <Ionicons name="arrow-forward" size={20} color="#fff" />}
            </TouchableOpacity>

            {/* Divider */}
            <View style={styles.divider}>
              <View style={[styles.dividerLine, isDark && styles.dividerLineDark]} />
              <Text style={[styles.dividerText, isDark && styles.dividerTextDark]}>–∏–ª–∏</Text>
              <View style={[styles.dividerLine, isDark && styles.dividerLineDark]} />
            </View>

            {/* Social Register Buttons */}
            <SocialAuthButtons
              onGooglePress={handleGoogleRegister}
              onFacebookPress={handleFacebookRegister}
              onApplePress={handleAppleRegister}
              isLoading={isLoading}
              disabled={isLoading}
            />

            {/* Quick Fill Button */}
            <TouchableOpacity style={styles.quickFillButton} onPress={handleQuickFill}>
              <Text style={[styles.quickFillText, isDark && styles.quickFillTextDark]}>
                –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
              </Text>
            </TouchableOpacity>
          </View>

          {/* Footer */}
          <View style={styles.footer}>
            <Text style={[styles.footerText, isDark && styles.footerTextDark]}>
              –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? 
            </Text>
            <TouchableOpacity onPress={() => navigation.navigate('Login' as never)}>
              <Text style={styles.linkText}>–í–æ–π—Ç–∏</Text>
            </TouchableOpacity>
          </View>

          {/* Help Section */}
          <View style={styles.helpSection}>
            <Text style={[styles.helpTitle, isDark && styles.helpTitleDark]}>
              –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?
            </Text>
            <TouchableOpacity style={styles.helpButton} onPress={handleSupportChat}>
              <Ionicons
                name="logo-whatsapp"
                size={16}
                color="#25D366"
              />
              <Text style={styles.helpButtonText}>–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>

      {/* Terms of Service Modal */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={showTermsModal}
        onRequestClose={() => setShowTermsModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={[styles.modalContainer, isDark && styles.modalContainerDark]}>
            <View style={styles.modalHeader}>
              <Text style={[styles.modalTitle, isDark && styles.modalTitleDark]}>
                –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
              </Text>
              <TouchableOpacity
                style={styles.modalCloseButton}
                onPress={() => setShowTermsModal(false)}
              >
                <Ionicons name="close" size={24} color={isDark ? '#F9FAFB' : '#111827'} />
              </TouchableOpacity>
            </View>
            <ScrollView style={styles.modalContent} showsVerticalScrollIndicator={false}>
              <Text style={[styles.modalText, isDark && styles.modalTextDark]}>
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FixDrive!{'\n\n'}
                
                –ò—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à —Å–µ—Ä–≤–∏—Å, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Å–ª–µ–¥—É—é—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏:{'\n\n'}
                
                1. FixDrive –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫{'\n\n'}
                
                2. –í—ã –æ–±—è–∑—É–µ—Ç–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏{'\n\n'}
                
                3. –û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã{'\n\n'}
                
                4. –ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö{'\n\n'}
                
                5. –í —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã –ø–æ–µ–∑–¥–∫–∏ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 30 –º–∏–Ω—É—Ç –º–æ–∂–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è —à—Ç—Ä–∞—Ñ{'\n\n'}
                
                6. –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π{'\n\n'}
                
                –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.
              </Text>
            </ScrollView>
            <TouchableOpacity
              style={[styles.modalButton, styles.clientModalButton]}
              onPress={() => setShowTermsModal(false)}
            >
              <Text style={styles.modalButtonText}>–ü–æ–Ω—è—Ç–Ω–æ</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      {/* Privacy Policy Modal */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={showPrivacyModal}
        onRequestClose={() => setShowPrivacyModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={[styles.modalContainer, isDark && styles.modalContainerDark]}>
            <View style={styles.modalHeader}>
              <Text style={[styles.modalTitle, isDark && styles.modalTitleDark]}>
                –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
              </Text>
              <TouchableOpacity
                style={styles.modalCloseButton}
                onPress={() => setShowPrivacyModal(false)}
              >
                <Ionicons name="close" size={24} color={isDark ? '#F9FAFB' : '#111827'} />
              </TouchableOpacity>
            </View>
            <ScrollView style={styles.modalContent} showsVerticalScrollIndicator={false}>
              <Text style={[styles.modalText, isDark && styles.modalTextDark]}>
                üìú Privacy Policy FixDrive{'\n\n'}
                
                1Ô∏è‚É£ –ö—Ç–æ –º—ã{'\n'}
                FixDrive ‚Äî —Å–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.{'\n'}
                –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö: FixDrive LLC, support@fixdrive.com{'\n\n'}
                
                2Ô∏è‚É£ –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º—ã —Å–æ–±–∏—Ä–∞–µ–º{'\n'}
                ‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è: –∏–º—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email, –ø–ª–∞—Ç—ë–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è{'\n'}
                ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–æ–∫: –¥–∞—Ç—ã, –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –º–∞—Ä—à—Ä—É—Ç (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è){'\n'}
                ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: IP-–∞–¥—Ä–µ—Å, –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞{'\n'}
                ‚úÖ –õ–æ–≥–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: –∫–ª–∏–∫–∏, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–º–µ–Ω{'\n'}
                ‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π: —Ä–µ–π—Ç–∏–Ω–≥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫{'\n\n'}
                
                3Ô∏è‚É£ –î–ª—è —á–µ–≥–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ{'\n'}
                ‚Ä¢ –î–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ FixDrive: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–µ–∑–¥–æ–∫{'\n'}
                ‚Ä¢ –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (ML){'\n'}
                ‚Ä¢ –î–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–µ–∑–¥–∫–µ, —á–∞—Ç—ã){'\n'}
                ‚Ä¢ –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞ (–∞–Ω–æ–Ω–∏–º–Ω–æ){'\n'}
                ‚Ä¢ –î–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∑–∞–∫–æ–Ω–∞ –∏ –∑–∞—â–∏—Ç—ã –ø—Ä–∞–≤ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω{'\n\n'}
                
                4Ô∏è‚É£ –° –∫–µ–º –º—ã –¥–µ–ª–∏–º—Å—è –¥–∞–Ω–Ω—ã–º–∏{'\n'}
                ‚Ä¢ –° –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ FixDrive: —Ç–æ–ª—å–∫–æ –∏–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ –ø–æ –∑–∞–∫–∞–∑—É{'\n'}
                ‚Ä¢ –° –ø–ª–∞—Ç—ë–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ (Stripe) ‚Äî –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã{'\n'}
                ‚Ä¢ –° –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∞–º–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –∑–∞–∫–æ–Ω–∞{'\n'}
                ‚Ä¢ –° –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏ ‚Äî —Ç–æ–ª—å–∫–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏{'\n\n'}
                
                5Ô∏è‚É£ –ö–∞–∫ –º—ã –∑–∞—â–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ{'\n'}
                ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTPS, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ—Å—Ç—É–ø–∞{'\n'}
                ‚Ä¢ –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö{'\n'}
                ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏{'\n\n'}
                
                6Ô∏è‚É£ –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö{'\n'}
                –ú—ã —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª—å—à–µ, —á–µ–º —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ü–µ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–∫–æ–Ω—É.{'\n'}
                –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞–º: support@fixdrive.com{'\n\n'}
                
                7Ô∏è‚É£ –í–∞—à–∏ –ø—Ä–∞–≤–∞{'\n'}
                ‚Ä¢ –ü—Ä–∞–≤–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –º—ã —Ö—Ä–∞–Ω–∏–º{'\n'}
                ‚Ä¢ –ü—Ä–∞–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ø–∏—é –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö{'\n'}
                ‚Ä¢ –ü—Ä–∞–≤–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ{'\n'}
                ‚Ä¢ –ü—Ä–∞–≤–æ –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É{'\n\n'}
                
                8Ô∏è‚É£ –ö–æ–Ω—Ç–∞–∫—Ç—ã{'\n'}
                –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ: support@fixdrive.com, +994516995513{'\n\n'}
                
                –û–±–Ω–æ–≤–ª–µ–Ω–æ: –î–µ–∫–∞–±—Ä—å 2024
              </Text>
            </ScrollView>
            <TouchableOpacity
              style={[styles.modalButton, styles.clientModalButton]}
              onPress={() => setShowPrivacyModal(false)}
            >
              <Text style={styles.modalButtonText}>–ü–æ–Ω—è—Ç–Ω–æ</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  containerDark: {
    backgroundColor: '#111827',
  },
  keyboardView: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
    padding: 20,
  },
  header: {
    alignItems: 'center',
    marginTop: 20,
    marginBottom: 30,
  },
  backButton: {
    position: 'absolute',
    top: 0,
    left: 0,
    padding: 8,
  },
  logoContainer: {
    width: 100,
    height: 100,
    borderRadius: 50,
    backgroundColor: '#F8FAFC',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  logoContainerDark: {
    backgroundColor: '#374151',
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    color: '#111827',
    marginBottom: 8,
    textAlign: 'center',
  },
  titleDark: {
    color: '#F9FAFB',
  },
  subtitle: {
    fontSize: 16,
    color: '#6B7280',
    textAlign: 'center',
  },
  subtitleDark: {
    color: '#9CA3AF',
  },
  form: {
    marginBottom: 30,
  },
  inputRow: {
    flexDirection: 'row',
    marginBottom: 16,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F8FAFC',
    borderRadius: 16,
    marginBottom: 16,
    paddingHorizontal: 16,
    height: 56,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  inputContainerDark: {
    backgroundColor: '#374151',
    borderColor: '#4B5563',
  },
  inputIcon: {
    marginRight: 12,
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#111827',
  },
  inputDark: {
    color: '#F9FAFB',
  },
  eyeButton: {
    padding: 4,
  },
  registerButton: {
    backgroundColor: '#1E3A8A',
    borderRadius: 16,
    paddingVertical: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 24,
    shadowColor: '#1E3A8A',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
  },
  registerButtonDisabled: {
    opacity: 0.7,
  },
  registerButtonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
    marginRight: 8,
  },
  divider: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 24,
  },
  dividerLine: {
    flex: 1,
    height: 1,
    backgroundColor: '#E5E7EB',
  },
  dividerLineDark: {
    backgroundColor: '#4B5563',
  },
  dividerText: {
    marginHorizontal: 16,
    fontSize: 14,
    color: '#6B7280',
    fontWeight: '500',
  },
  dividerTextDark: {
    color: '#9CA3AF',
  },
  socialButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 24,
  },
  socialButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    paddingVertical: 14,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  socialButtonDark: {
    backgroundColor: '#374151',
    borderColor: '#4B5563',
  },
  googleButton: {
    marginRight: 8,
  },
  facebookButton: {
    marginLeft: 8,
  },
  socialButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#374151',
    marginLeft: 8,
  },
  socialButtonTextDark: {
    color: '#D1D5DB',
  },
  quickFillButton: {
    alignItems: 'center',
    marginTop: 8,
  },
  quickFillText: {
    color: '#1E3A8A',
    fontSize: 14,
    fontWeight: '500',
    textDecorationLine: 'underline',
  },
  quickFillTextDark: {
    color: '#60A5FA',
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 30,
  },
  footerText: {
    color: '#6B7280',
    fontSize: 16,
  },
  footerTextDark: {
    color: '#9CA3AF',
  },
  linkText: {
    color: '#1E3A8A',
    fontSize: 16,
    fontWeight: '600',
  },
  underlineText: {
    textDecorationLine: 'underline',
  },
  helpSection: {
    alignItems: 'center',
  },
  helpTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 12,
  },
  helpTitleDark: {
    color: '#D1D5DB',
  },
  helpButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
  },
  helpButtonText: {
    color: '#1E3A8A',
    fontSize: 14,
    fontWeight: '500',
    marginLeft: 6,
  },
  // Agreement Section Styles
  agreementSection: {
    marginBottom: 24,
  },
  checkboxContainer: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  checkbox: {
    width: 20,
    height: 20,
    borderRadius: 4,
    borderWidth: 2,
    borderColor: '#D1D5DB',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
    marginTop: 2,
  },
  checkboxChecked: {
    backgroundColor: '#27ae60',
    borderColor: '#27ae60',
  },
  checkboxText: {
    flex: 1,
    fontSize: 14,
    color: '#374151',
    lineHeight: 20,
  },
  checkboxTextDark: {
    color: '#D1D5DB',
  },
  // Client Button Color
  clientRegisterButton: {
    backgroundColor: '#27ae60',
    shadowColor: '#27ae60',
  },
  // Modal Styles
  modalOverlay: {
    flex: 1,
    backgroundColor: 'transparent',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modalContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 20,
    width: '100%',
    maxHeight: '80%',
    borderWidth: 2,
    borderColor: '#E5E7EB',
  },
  modalContainerDark: {
    backgroundColor: '#1F2937',
    borderColor: '#4B5563',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#111827',
    flex: 1,
  },
  modalTitleDark: {
    color: '#F9FAFB',
  },
  modalCloseButton: {
    padding: 4,
  },
  modalContent: {
    padding: 20,
    maxHeight: 400,
  },
  modalText: {
    fontSize: 14,
    color: '#374151',
    lineHeight: 22,
  },
  modalTextDark: {
    color: '#D1D5DB',
  },
  modalButton: {
    borderRadius: 12,
    paddingVertical: 12,
    paddingHorizontal: 24,
    alignItems: 'center',
    margin: 20,
    marginTop: 0,
  },
  clientModalButton: {
    backgroundColor: '#27ae60',
  },
  modalButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  errorRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  errorText: {
    color: '#DC2626',
    fontSize: 12,
    marginTop: 4,
    flex: 1,
  },
});

export default ClientRegisterScreen;
