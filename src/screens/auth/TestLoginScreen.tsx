import React, { useState } from 'react';
import { 
  View, 
  Text, 
  TouchableOpacity, 
  SafeAreaView,
  Alert,
  StyleSheet
} from 'react-native';
import { AuthService } from '../../services/AuthService';

const TestLoginScreen: React.FC = () => {
  const [loading, setLoading] = useState(false);

  const handleTestLogin = async (type: 'client' | 'driver') => {
    setLoading(true);
    try {
      const email = type === 'client' ? 'client@example.com' : 'driver@example.com';
      const password = 'password123';
      
  
      
      const result = await AuthService.login(email, password);
      
      if (result.success) {
        Alert.alert(
          '‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!', 
          `–í–æ—à–ª–∏ –∫–∞–∫ ${type}\nEmail: ${email}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.user?.name}`
        );
    
      } else {
        Alert.alert('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', result);
      }
    } catch (error) {
      Alert.alert('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.content}>
        <Text style={styles.title}>üß™ –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞</Text>
        <Text style={styles.subtitle}>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –º–æ–∫–æ–≤</Text>
        
        <View style={styles.buttonContainer}>
          <TouchableOpacity
            style={[styles.button, styles.clientButton]}
            onPress={() => handleTestLogin('client')}
            disabled={loading}
          >
            <Text style={styles.buttonText}>
              {loading ? '‚è≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º...' : 'üë§ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞'}
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[styles.button, styles.driverButton]}
            onPress={() => handleTestLogin('driver')}
            disabled={loading}
          >
            <Text style={styles.buttonText}>
              {loading ? '‚è≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º...' : 'üöó –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤–æ–¥–∏—Ç–µ–ª—è'}
            </Text>
          </TouchableOpacity>
        </View>
        
        <View style={styles.infoContainer}>
          <Text style={styles.infoTitle}>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:</Text>
          <Text style={styles.infoText}>üë§ –ö–ª–∏–µ–Ω—Ç: client@example.com / password123</Text>
          <Text style={styles.infoText}>üöó –í–æ–¥–∏—Ç–µ–ª—å: driver@example.com / password123</Text>
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  content: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 8,
    color: '#333',
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 40,
    color: '#666',
  },
  buttonContainer: {
    gap: 16,
    marginBottom: 40,
  },
  button: {
    paddingVertical: 16,
    paddingHorizontal: 24,
    borderRadius: 8,
    alignItems: 'center',
  },
  clientButton: {
    backgroundColor: '#10B981',
  },
  driverButton: {
    backgroundColor: '#3B82F6',
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  infoContainer: {
    backgroundColor: 'white',
    padding: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e5e5e5',
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 12,
    color: '#333',
  },
  infoText: {
    fontSize: 14,
    marginBottom: 8,
    color: '#666',
  },
});

export default TestLoginScreen; 