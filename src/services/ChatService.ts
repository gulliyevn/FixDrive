import { Chat, Message } from '../types/chat';

class ChatService {
  private chats: Chat[] = [];
  private messages: { [chatId: string]: Message[] } = {};

  constructor() {
    console.log('üí¨ ChatService: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —á–∞—Ç–∞');
    this.initializeMockData();
  }

  private initializeMockData() {
    const now = new Date();
    
    // –ú–æ–∫–æ–≤—ã–µ —á–∞—Ç—ã
    this.chats = [
      {
        id: '1',
        participantId: 'driver_1',
        participantName: '–†–∞—à–∞–¥ –ú–∞–º–µ–¥–æ–≤',
        participantAvatar: 'https://i.pravatar.cc/150?img=1',
        participantRole: 'driver',
        lastMessage: '–£–∂–µ –µ–¥—É –∫ –≤–∞–º, –±—É–¥—É —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã',
        lastMessageTime: new Date(now.getTime() - 2 * 60 * 1000),
        unreadCount: 1,
        isOnline: true,
        tripId: 'trip_1',
      },
      {
        id: '2',
        participantId: 'driver_2',
        participantName: '–≠–ª—å–Ω—É—Ä –î–∂–∞—Ñ–∞—Ä–æ–≤',
        participantAvatar: 'https://i.pravatar.cc/150?img=2',
        participantRole: 'driver',
        lastMessage: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–µ–∑–¥–∫—É! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è',
        lastMessageTime: new Date(now.getTime() - 30 * 60 * 1000),
        unreadCount: 0,
        isOnline: false,
        tripId: 'trip_2',
      },
      {
        id: '3',
        participantId: 'driver_3',
        participantName: '–û—Ä—Ö–∞–Ω –ê–ª–∏–µ–≤',
        participantAvatar: 'https://i.pravatar.cc/150?img=3',
        participantRole: 'driver',
        lastMessage: '–ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å –Ω–∞ 5 –º–∏–Ω—É—Ç –∏–∑-–∑–∞ –ø—Ä–æ–±–∫–∏',
        lastMessageTime: new Date(now.getTime() - 2 * 60 * 60 * 1000),
        unreadCount: 2,
        isOnline: true,
        tripId: 'trip_3',
      },
      {
        id: '4',
        participantId: 'support',
        participantName: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ FixDrive',
        participantAvatar: null,
        participantRole: 'support',
        lastMessage: '–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É',
        lastMessageTime: new Date(now.getTime() - 24 * 60 * 60 * 1000),
        unreadCount: 0,
        isOnline: true,
        tripId: null,
      },
    ];

    // –ú–æ–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
    this.messages = {
      '1': [
        {
          id: 'msg_1_1',
          chatId: '1',
          senderId: 'driver_1',
          senderName: '–†–∞—à–∞–¥ –ú–∞–º–µ–¥–æ–≤',
          content: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –≤–∞—à –≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
          timestamp: new Date(now.getTime() - 15 * 60 * 1000),
          type: 'text',
          isRead: true,
        },
        {
          id: 'msg_1_2',
          chatId: '1',
          senderId: 'me',
          senderName: '–Ø',
          content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ?',
          timestamp: new Date(now.getTime() - 12 * 60 * 1000),
          type: 'text',
          isRead: true,
        },
        {
          id: 'msg_1_3',
          chatId: '1',
          senderId: 'driver_1',
          senderName: '–†–∞—à–∞–¥ –ú–∞–º–µ–¥–æ–≤',
          content: '–£–∂–µ –µ–¥—É –∫ –≤–∞–º, –±—É–¥—É —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã',
          timestamp: new Date(now.getTime() - 2 * 60 * 1000),
          type: 'text',
          isRead: false,
        },
      ],
      '2': [
        {
          id: 'msg_2_1',
          chatId: '2',
          senderId: 'driver_2',
          senderName: '–≠–ª—å–Ω—É—Ä –î–∂–∞—Ñ–∞—Ä–æ–≤',
          content: '–ü—Ä–∏–µ—Ö–∞–ª, –∂–¥—É —É –ø–æ–¥—ä–µ–∑–¥–∞',
          timestamp: new Date(now.getTime() - 45 * 60 * 1000),
          type: 'text',
          isRead: true,
        },
        {
          id: 'msg_2_2',
          chatId: '2',
          senderId: 'me',
          senderName: '–Ø',
          content: '–í—ã—Ö–æ–∂—É',
          timestamp: new Date(now.getTime() - 40 * 60 * 1000),
          type: 'text',
          isRead: true,
        },
        {
          id: 'msg_2_3',
          chatId: '2',
          senderId: 'driver_2',
          senderName: '–≠–ª—å–Ω—É—Ä –î–∂–∞—Ñ–∞—Ä–æ–≤',
          content: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–µ–∑–¥–∫—É! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è',
          timestamp: new Date(now.getTime() - 30 * 60 * 1000),
          type: 'text',
          isRead: true,
        },
      ],
      '3': [
        {
          id: 'msg_3_1',
          chatId: '3',
          senderId: 'driver_3',
          senderName: '–û—Ä—Ö–∞–Ω –ê–ª–∏–µ–≤',
          content: '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –í—ã–µ–∑–∂–∞—é –∫ –≤–∞–º',
          timestamp: new Date(now.getTime() - 3 * 60 * 60 * 1000),
          type: 'text',
          isRead: true,
        },
        {
          id: 'msg_3_2',
          chatId: '3',
          senderId: 'driver_3',
          senderName: '–û—Ä—Ö–∞–Ω –ê–ª–∏–µ–≤',
          content: '–ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å –Ω–∞ 5 –º–∏–Ω—É—Ç –∏–∑-–∑–∞ –ø—Ä–æ–±–∫–∏',
          timestamp: new Date(now.getTime() - 2 * 60 * 60 * 1000),
          type: 'text',
          isRead: false,
        },
        {
          id: 'msg_3_3',
          chatId: '3',
          senderId: 'driver_3',
          senderName: '–û—Ä—Ö–∞–Ω –ê–ª–∏–µ–≤',
          content: '–£–∂–µ –±–ª–∏–∑–∫–æ, –µ—â–µ 2 –º–∏–Ω—É—Ç—ã',
          timestamp: new Date(now.getTime() - 90 * 60 * 1000),
          type: 'text',
          isRead: false,
        },
      ],
      '4': [
        {
          id: 'msg_4_1',
          chatId: '4',
          senderId: 'me',
          senderName: '–Ø',
          content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º',
          timestamp: new Date(now.getTime() - 25 * 60 * 60 * 1000),
          type: 'text',
          isRead: true,
        },
        {
          id: 'msg_4_2',
          chatId: '4',
          senderId: 'support',
          senderName: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ FixDrive',
          content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
          timestamp: new Date(now.getTime() - 24.5 * 60 * 60 * 1000),
          type: 'text',
          isRead: true,
        },
        {
          id: 'msg_4_3',
          chatId: '4',
          senderId: 'support',
          senderName: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ FixDrive',
          content: '–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É',
          timestamp: new Date(now.getTime() - 24 * 60 * 60 * 1000),
          type: 'text',
          isRead: true,
        },
      ],
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
  async getChats(userId: string): Promise<Chat[]> {
    console.log('üìã ChatService: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId);
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve([...this.chats].sort((a, b) => 
          b.lastMessageTime.getTime() - a.lastMessageTime.getTime()
        ));
      }, 300);
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
  async getMessages(chatId: string): Promise<Message[]> {
    console.log('üíå ChatService: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞', chatId);
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(this.messages[chatId] || []);
      }, 200);
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage(chatId: string, content: string, senderId: string): Promise<Message> {
    console.log('üì§ ChatService: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç', chatId, '–æ—Ç', senderId);
    return new Promise((resolve) => {
      const message: Message = {
        id: `msg_${chatId}_${Date.now()}`,
        chatId,
        senderId,
        senderName: senderId === 'me' ? '–Ø' : '–í–æ–¥–∏—Ç–µ–ª—å',
        content,
        timestamp: new Date(),
        type: 'text',
        isRead: false,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
      if (!this.messages[chatId]) {
        this.messages[chatId] = [];
      }
      this.messages[chatId].push(message);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
      const chat = this.chats.find(c => c.id === chatId);
      if (chat) {
        chat.lastMessage = content;
        chat.lastMessageTime = message.timestamp;
        if (senderId !== 'me') {
          chat.unreadCount += 1;
        }
      }

      setTimeout(() => resolve(message), 100);
    });
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  async markMessagesAsRead(chatId: string): Promise<void> {
    return new Promise((resolve) => {
      const messages = this.messages[chatId];
      if (messages) {
        messages.forEach(msg => {
          if (msg.senderId !== 'me') {
            msg.isRead = true;
          }
        });
      }

      // –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç–µ
      const chat = this.chats.find(c => c.id === chatId);
      if (chat) {
        chat.unreadCount = 0;
      }

      setTimeout(() => resolve(), 100);
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
  async createChat(participantId: string, participantName: string, tripId?: string): Promise<Chat> {
    return new Promise((resolve) => {
      const chat: Chat = {
        id: `chat_${Date.now()}`,
        participantId,
        participantName,
        participantAvatar: `https://i.pravatar.cc/150?img=${Math.floor(Math.random() * 70)}`,
        participantRole: 'driver',
        lastMessage: '',
        lastMessageTime: new Date(),
        unreadCount: 0,
        isOnline: Math.random() > 0.3, // 70% —à–∞–Ω—Å –±—ã—Ç—å –æ–Ω–ª–∞–π–Ω
        tripId,
      };

      this.chats.unshift(chat);
      this.messages[chat.id] = [];

      setTimeout(() => resolve(chat), 200);
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  getTotalUnreadCount(): number {
    return this.chats.reduce((total, chat) => total + chat.unreadCount, 0);
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  simulateIncomingMessage(chatId: string) {
    const randomMessages = [
      '–£–∂–µ –≤ –ø—É—Ç–∏ –∫ –≤–∞–º',
      '–ë—É–¥—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç',
      '–ñ–¥—É —É –ø–æ–¥—ä–µ–∑–¥–∞',
      '–ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å –Ω–∞ 2 –º–∏–Ω—É—Ç—ã',
      '–ü—Ä–∏–µ—Ö–∞–ª, –≥–¥–µ –≤–∞—Å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å?',
      '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–µ–∑–¥–∫—É!',
      '–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!',
    ];

    const chat = this.chats.find(c => c.id === chatId);
    if (!chat) return;

    const message: Message = {
      id: `msg_${chatId}_${Date.now()}`,
      chatId,
      senderId: chat.participantId,
      senderName: chat.participantName,
      content: randomMessages[Math.floor(Math.random() * randomMessages.length)],
      timestamp: new Date(),
      type: 'text',
      isRead: false,
    };

    if (!this.messages[chatId]) {
      this.messages[chatId] = [];
    }
    this.messages[chatId].push(message);

    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
    chat.lastMessage = message.content;
    chat.lastMessageTime = message.timestamp;
    chat.unreadCount += 1;

    return message;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatMessageTime(date: Date): string {
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMinutes / 60);
    const diffDays = Math.floor(diffHours / 24);

    if (diffMinutes < 1) {
      return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (diffMinutes < 60) {
      return `${diffMinutes} –º–∏–Ω`;
    } else if (diffHours < 24) {
      return date.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
      });
    } else if (diffDays === 1) {
      return '–≤—á–µ—Ä–∞';
    } else {
      return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
      });
    }
  }
}

// –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const chatService = new ChatService();
export default ChatService;
