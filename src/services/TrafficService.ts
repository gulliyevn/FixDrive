import { DATABASE_CONFIG } from '../config/database';

interface TrafficData {
  level: 'free' | 'low' | 'medium' | 'high' | 'heavy';
  speed: number; // –∫–º/—á
  delay: number; // –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
}

interface Coordinate {
  latitude: number;
  longitude: number;
}

// –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è production - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const ENABLE_TRAFFIC_LOGS = false;

const log = (message: string, data?: unknown) => {
  if (ENABLE_TRAFFIC_LOGS) {
    console.log(`üö¶ ${message}`, data || '');
  }
};

class TrafficService {
  private static instance: TrafficService;
  private trafficData: Map<string, Record<string, unknown>> = new Map();

  static getInstance(): TrafficService {
    if (!TrafficService.instance) {
      TrafficService.instance = new TrafficService();
    }
    return TrafficService.instance;
  }

  // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –∫–ª—é—á–∏ (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å)
  private static readonly HERE_API_KEY = DATABASE_CONFIG.services.traffic.hereApiKey;
  private static readonly OPENWEATHER_API_KEY = DATABASE_CONFIG.services.traffic.openweatherApiKey;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–∫–∞—Ö –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
  static async getTrafficForRoute(coordinates: Coordinate[]): Promise<TrafficData[]> {
    try {
      // –ü–æ–∫–∞ API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é
      return this.simulateRealisticTraffic(coordinates);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–∫–∞—Ö:', error);
      return this.simulateRealisticTraffic(coordinates);
    }
  }

  // HERE Traffic API (–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –∫–ª—é—á)
  private static async getHereTraffic(coordinates: Coordinate[]): Promise<TrafficData[]> {
    const trafficData: TrafficData[] = [];
    
    for (const coord of coordinates) {
      try {
        const url = `https://traffic.ls.hereapi.com/traffic/6.3/flow.json?apikey=${this.HERE_API_KEY}&bbox=${coord.latitude-0.01},${coord.longitude-0.01};${coord.latitude+0.01},${coord.longitude+0.01}`;
        
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.RWS && data.RWS[0] && data.RWS[0].RW) {
          const flowInfo = data.RWS[0].RW[0].FIS[0].FI[0];
          const currentSpeed = flowInfo.CF[0].SU || 50;
          const freeFlowSpeed = flowInfo.CF[0].FF || 60;
          
          const speedRatio = currentSpeed / freeFlowSpeed;
          let level: 'free' | 'low' | 'medium' | 'high' | 'heavy';
          
          if (speedRatio > 0.8) level = 'free';
          else if (speedRatio > 0.6) level = 'low';
          else if (speedRatio > 0.4) level = 'medium';
          else if (speedRatio > 0.2) level = 'high';
          else level = 'heavy';
          
          trafficData.push({
            level,
            speed: currentSpeed,
            delay: Math.max(0, (freeFlowSpeed - currentSpeed) / freeFlowSpeed * 10)
          });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ HERE API:', error);
      }
    }
    
    return trafficData;
  }

  // –£–º–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
  private static simulateRealisticTraffic(coordinates: Coordinate[]): TrafficData[] {
    const trafficData: TrafficData[] = [];
    const now = new Date();
    const currentHour = now.getHours();
    const currentDay = now.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, etc.
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
    const isWeekend = currentDay === 0 || currentDay === 6;
    const isMorningRush = currentHour >= 7 && currentHour <= 10;
    const isEveningRush = currentHour >= 17 && currentHour <= 20;
    const isNightTime = currentHour >= 22 || currentHour <= 6;
    const isLunchTime = currentHour >= 12 && currentHour <= 14;

    coordinates.forEach((coord) => {
      // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–æ–∫
      let baseTrafficLevel = 0.3; // 30% –±–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å
      
      // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
      if (isWeekend) {
        baseTrafficLevel *= 0.6; // –ù–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –º–µ–Ω—å—à–µ –ø—Ä–æ–±–æ–∫
        if (isLunchTime) baseTrafficLevel *= 1.3; // –ù–æ –±–æ–ª—å—à–µ –≤ –æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      } else {
        // –†–∞–±–æ—á–∏–µ –¥–Ω–∏
        if (isMorningRush || isEveningRush) {
          baseTrafficLevel *= 2.5; // –ß–∞—Å –ø–∏–∫
        } else if (isLunchTime) {
          baseTrafficLevel *= 1.4; // –û–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        } else if (isNightTime) {
          baseTrafficLevel *= 0.2; // –ù–æ—á—å—é —Å–≤–æ–±–æ–¥–Ω–æ
        }
      }

      // –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ë–∞–∫—É
      const lat = coord.latitude;
      const lng = coord.longitude;
      
      // –¶–µ–Ω—Ç—Ä –ë–∞–∫—É (–±–æ–ª–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π)
      if (lat > 40.360 && lat < 40.420 && lng > 49.830 && lng < 49.890) {
        baseTrafficLevel *= 1.5;
      }
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞–≥–∏—Å—Ç—Ä–∞–ª–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
      if (this.isNearMajorRoad(lat, lng)) {
        baseTrafficLevel *= 1.3;
      }
      
      // –ñ–∏–ª—ã–µ —Ä–∞–π–æ–Ω—ã
      if (this.isResidentialArea(lat, lng)) {
        baseTrafficLevel *= 0.8;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
      const randomFactor = 0.8 + Math.random() * 0.4; // ¬±20%
      baseTrafficLevel *= randomFactor;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
      let level: 'free' | 'low' | 'medium' | 'high' | 'heavy';
      let speed: number;
      
      if (baseTrafficLevel < 0.3) {
        level = 'free';
        speed = 50 + Math.random() * 20; // 50-70 –∫–º/—á
      } else if (baseTrafficLevel < 0.6) {
        level = 'low';
        speed = 35 + Math.random() * 15; // 35-50 –∫–º/—á
      } else if (baseTrafficLevel < 1.0) {
        level = 'medium';
        speed = 20 + Math.random() * 15; // 20-35 –∫–º/—á
      } else if (baseTrafficLevel < 1.5) {
        level = 'high';
        speed = 10 + Math.random() * 10; // 10-20 –∫–º/—á
      } else {
        level = 'heavy';
        speed = 5 + Math.random() * 5; // 5-10 –∫–º/—á
      }

      const delay = Math.max(0, (50 - speed) / 50 * 15); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ 15 –º–∏–Ω—É—Ç

      trafficData.push({
        level,
        speed: Math.round(speed),
        delay: Math.round(delay)
      });
    });

    return trafficData;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –¥–æ—Ä–æ–≥–∞–º –ë–∞–∫—É
  private static isNearMajorRoad(lat: number, lng: number): boolean {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞–≥–∏—Å—Ç—Ä–∞–ª–µ–π –ë–∞–∫—É
    const majorRoads = [
      { lat: 40.4093, lng: 49.8671 }, // –ù–∏–∑–∞–º–∏
      { lat: 40.3650, lng: 49.8350 }, // –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä
      { lat: 40.3950, lng: 49.8820 }, // –Ø—Å–∞–º–∞–ª
      { lat: 40.4200, lng: 49.9100 }, // –ù–∞—Ä–∏–º–∞–Ω–æ–≤
    ];

    return majorRoads.some(road => {
      const distance = Math.sqrt(
        Math.pow(lat - road.lat, 2) + Math.pow(lng - road.lng, 2)
      );
      return distance < 0.01; // –ü—Ä–∏–º–µ—Ä–Ω–æ 1 –∫–º
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–ª–æ–≥–æ —Ä–∞–π–æ–Ω–∞
  private static isResidentialArea(lat: number, lng: number): boolean {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∂–∏–ª—ã–µ —Ä–∞–π–æ–Ω—ã
    return (lat > 40.380 && lat < 40.450 && lng > 49.800 && lng < 49.950) &&
           !(lat > 40.360 && lat < 40.420 && lng > 49.830 && lng < 49.890); // –ò—Å–∫–ª—é—á–∞–µ–º —Ü–µ–Ω—Ç—Ä
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ–∫ –¥–ª—è –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏
  static getTrafficLevel(coordinate: { latitude: number; longitude: number }, time: Date): 'free' | 'low' | 'medium' | 'high' | 'heavy' {
    const hour = time.getHours();
    const dayOfWeek = time.getDay();
    
    // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
    let baseLevel: 'free' | 'low' | 'medium' | 'high' | 'heavy' = 'medium';
    
    // –£—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã –ø–∏–∫ (7-9)
    if (hour >= 7 && hour <= 9) {
      baseLevel = 'high';
    }
    // –í–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã –ø–∏–∫ (17-19)
    else if (hour >= 17 && hour <= 19) {
      baseLevel = 'heavy';
    }
    // –ù–æ—á–Ω—ã–µ —á–∞—Å—ã (22-6)
    else if (hour >= 22 || hour <= 6) {
      baseLevel = 'free';
    }
    // –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏
    else if (dayOfWeek === 0 || dayOfWeek === 6) {
      baseLevel = 'low';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    const random = Math.random();
    if (random < 0.1) {
      baseLevel = 'free';
    } else if (random < 0.2) {
      baseLevel = 'low';
    } else if (random < 0.6) {
      baseLevel = 'medium';
    } else if (random < 0.8) {
      baseLevel = 'high';
    } else {
      baseLevel = 'heavy';
    }
    
    return baseLevel;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ–∫
  static getTrafficDescription(level: 'free' | 'low' | 'medium' | 'high' | 'heavy'): string {
    const descriptions = {
      free: '–°–≤–æ–±–æ–¥–Ω–æ',
      low: '–ù–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–∫–∏',
      medium: '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–∫–∏',
      high: '–°–∏–ª—å–Ω—ã–µ –ø—Ä–æ–±–∫–∏',
      heavy: '–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –ø—Ä–æ–±–∫–∏'
    };
    return descriptions[level];
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–∫–∞—Ö
  updateTrafficData(): void {
    log('–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–∫–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ–±–æ–∫
  getTrafficForecast(coordinate: { latitude: number; longitude: number }, time: Date): Record<string, unknown> {
    const currentLevel = TrafficService.getTrafficLevel(coordinate, time);
    
    return {
      current: currentLevel,
      forecast: currentLevel, // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
      confidence: 0.8,
    };
  }
}

export default TrafficService.getInstance();
export type { TrafficData, Coordinate }; 