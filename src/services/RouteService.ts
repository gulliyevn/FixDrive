import TrafficService from './TrafficService';

interface Coordinate {
  latitude: number;
  longitude: number;
}

interface RouteSegment {
  coordinates: Coordinate[];
  trafficLevel: 'free' | 'low' | 'medium' | 'high' | 'heavy';
  duration: number;
  distance: number;
}

interface RouteResponse {
  coordinates: Coordinate[];
  duration: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  distance: number; // –≤ –º–µ—Ç—Ä–∞—Ö
  segments: RouteSegment[];
}

class RouteService {
  private static readonly API_KEY = '5b3ce3597851110001cf6248a22990d18f9f44b29c2b7b5f8f42d9ef';
  private static readonly BASE_URL = 'https://api.openrouteservice.org/v2';
  private static isAPIBlocked = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ API

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
  static async getRoute(start: Coordinate, end: Coordinate): Promise<RouteResponse> {
    console.log('üöó –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞...');
    
    // –ï—Å–ª–∏ API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if (this.isAPIBlocked) {
      console.log('üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)');
      return this.getFallbackRoute(start, end);
    }
    
    try {
      // –ü—Ä–æ–±—É–µ–º OpenRouteService
      const openRouteResult = await this.getOpenRouteServiceRoute(start, end);
      if (openRouteResult) {
        console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return openRouteResult;
      }
    } catch (error) {
      // –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
      if (!this.isAPIBlocked) {
        console.log('üìç –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç');
        this.isAPIBlocked = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏
      }
    }

    // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç
    return this.getFallbackRoute(start, end);
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è OpenRouteService
  private static async getOpenRouteServiceRoute(start: Coordinate, end: Coordinate): Promise<RouteResponse | null> {
    try {
      const url = `${this.BASE_URL}/directions/driving-car`;
      const body = {
        coordinates: [[start.longitude, start.latitude], [end.longitude, end.latitude]],
        format: 'json',
        instructions: false,
      };

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000); // –£–º–µ–Ω—å—à–∏–ª timeout

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': this.API_KEY,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(body),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ–º–µ—á–∞–µ–º API –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        if (response.status === 403 || response.status === 429) {
          this.isAPIBlocked = true;
        }
        return null;
      }

      const data = await response.json();
      
      if (!data.routes || data.routes.length === 0) {
        return null;
      }

      const route = data.routes[0];
      
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
      const coordinates = this.decodePolyline(route.geometry);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–∫–∞–º–∏
      const segments = this.generateTrafficSegmentsSync(coordinates, route.summary.duration);

      return {
        coordinates,
        duration: route.summary.duration,
        distance: route.summary.distance,
        segments,
      };
    } catch (error) {
      if (error instanceof Error && error.name === 'AbortError') {
        this.isAPIBlocked = true; // –ü—Ä–∏ timeout —Ç–æ–∂–µ –±–ª–æ–∫–∏—Ä—É–µ–º
      }
      return null;
    }
  }

  // Fallback –º–∞—Ä—à—Ä—É—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
  private static getFallbackRoute(start: Coordinate, end: Coordinate): RouteResponse {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
    const coordinates = this.generateSimpleRoute(start, end);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º—è
    const distance = this.calculateDistance(start, end);
    const duration = Math.ceil(distance / 1000 * 2.5 * 60); // ~2.5 –º–∏–Ω—É—Ç—ã –Ω–∞ –∫–º –≤ –≥–æ—Ä–æ–¥–µ
    
    console.log('üìä –ú–∞—Ä—à—Ä—É—Ç –≥–æ—Ç–æ–≤:', {
      distance: Math.round(distance) + '–º',
      duration: Math.round(duration / 60) + '–º–∏–Ω',
      points: coordinates.length
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
    const segments = this.generateTrafficSegmentsSync(coordinates, duration);
    
    return {
      coordinates,
      duration,
      distance,
      segments,
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
  private static generateSimpleRoute(start: Coordinate, end: Coordinate): Coordinate[] {
    const steps = 15; // –ë–æ–ª—å—à–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    const coordinates: Coordinate[] = [];
    
    for (let i = 0; i <= steps; i++) {
      const ratio = i / steps;
      const lat = start.latitude + (end.latitude - start.latitude) * ratio;
      const lng = start.longitude + (end.longitude - start.longitude) * ratio;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–æ—Ä–æ–≥
      const roadOffset = 0.0008 * Math.sin(i * Math.PI / 3) * (1 - Math.abs(ratio - 0.5) * 2);
      const noiseX = roadOffset * Math.cos(i * Math.PI / 4);
      const noiseY = roadOffset * Math.sin(i * Math.PI / 4);
      
      coordinates.push({
        latitude: lat + noiseY,
        longitude: lng + noiseX,
      });
    }
    
    return coordinates;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–∞
  private static generateTrafficSegmentsSync(coordinates: Coordinate[], totalDuration: number): RouteSegment[] {
    const segments: RouteSegment[] = [];
    const segmentCount = Math.min(Math.max(Math.floor(coordinates.length / 12), 4), 10);
    
    for (let i = 0; i < segmentCount; i++) {
      const startIdx = Math.floor((i / segmentCount) * coordinates.length);
      const endIdx = Math.floor(((i + 1) / segmentCount) * coordinates.length);
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –∫–æ–Ω—Ü–∞
      const actualEndIdx = i === segmentCount - 1 ? coordinates.length - 1 : endIdx;
      
      // –ï—Å–ª–∏ startIdx >= actualEndIdx, –¥–µ–ª–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
      const segmentCoords = startIdx >= actualEndIdx 
        ? [coordinates[startIdx], coordinates[Math.min(startIdx + 1, coordinates.length - 1)]]
        : coordinates.slice(startIdx, actualEndIdx + 1);
      
      // –£–º–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–æ–∫ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –ª–æ–∫–∞—Ü–∏–∏
      const trafficLevel = TrafficService.getTrafficLevel(
        segmentCoords[0], 
        new Date(),
        i / segmentCount // –ø–æ–∑–∏—Ü–∏—è –≤ –º–∞—Ä—à—Ä—É—Ç–µ (0-1)
      );
      
      segments.push({
        coordinates: segmentCoords,
        trafficLevel,
        duration: Math.round((totalDuration / segmentCount) * this.getTrafficMultiplier(trafficLevel)),
        distance: this.calculateDistance(segmentCoords[0], segmentCoords[segmentCoords.length - 1]),
      });
    }

    return segments;
  }

  // –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–±–æ–∫
  private static getTrafficMultiplier(trafficLevel: 'free' | 'low' | 'medium' | 'high' | 'heavy'): number {
    switch (trafficLevel) {
      case 'free': return 0.8;   // –ù–∞ 20% –±—ã—Å—Ç—Ä–µ–µ
      case 'low': return 1.0;    // –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
      case 'medium': return 1.3; // –ù–∞ 30% –º–µ–¥–ª–µ–Ω–Ω–µ–µ
      case 'high': return 1.7;   // –ù–∞ 70% –º–µ–¥–ª–µ–Ω–Ω–µ–µ
      case 'heavy': return 2.2;  // –í 2.2 —Ä–∞–∑–∞ –º–µ–¥–ª–µ–Ω–Ω–µ–µ
      default: return 1.0;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)
  static async getFastestRoute(start: Coordinate, end: Coordinate): Promise<RouteResponse> {
    console.log('‚ö° –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞...');
    
    // –ï—Å–ª–∏ API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    if (this.isAPIBlocked) {
      return this.getRoute(start, end);
    }
    
    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –æ—Ç OpenRouteService
      const openRouteResult = await this.getOpenRouteServiceFastestRoute(start, end);
      if (openRouteResult) {
        console.log('‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω');
        return openRouteResult;
      }
    } catch (error) {
      // –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (!this.isAPIBlocked) {
        this.isAPIBlocked = true;
      }
    }

    // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    return this.getRoute(start, end);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–µ–π—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç OpenRouteService
  private static async getOpenRouteServiceFastestRoute(start: Coordinate, end: Coordinate): Promise<RouteResponse | null> {
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
      const url = `${this.BASE_URL}/directions/driving-car`;
      const body = {
        coordinates: [[start.longitude, start.latitude], [end.longitude, end.latitude]],
        format: 'json',
        instructions: false,
        alternative_routes: {
          target_count: 3,
          weight_factor: 1.4,
          share_factor: 0.6
        }
      };

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000); // –£–º–µ–Ω—å—à–∏–ª timeout

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': this.API_KEY,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(body),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ–º–µ—á–∞–µ–º API –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        if (response.status === 403 || response.status === 429) {
          this.isAPIBlocked = true;
        }
        return null;
      }

      const data = await response.json();
      
      if (!data.routes || data.routes.length === 0) {
        return null;
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–æ–∫
      let fastestRoute = null;
      let fastestTime = Infinity;

      for (const route of data.routes) {
        const coordinates = this.decodePolyline(route.geometry);
        const segments = this.generateTrafficSegmentsSync(coordinates, route.summary.duration);
        
        // –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–æ–∫
        const realTime = segments.reduce((total, segment) => total + segment.duration, 0);
        
        if (realTime < fastestTime) {
          fastestTime = realTime;
          fastestRoute = {
            coordinates,
            duration: realTime,
            distance: route.summary.distance,
            segments,
          };
        }
      }

      return fastestRoute;
    } catch (error) {
      if (error instanceof Error && error.name === 'AbortError') {
        this.isAPIBlocked = true; // –ü—Ä–∏ timeout —Ç–æ–∂–µ –±–ª–æ–∫–∏—Ä—É–µ–º
      }
      return null;
    }
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ–∫ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
  private static calculateAverageTrafficLevel(trafficData: any[]): 'free' | 'low' | 'medium' | 'high' | 'heavy' {
    if (!trafficData || trafficData.length === 0) return 'medium';
    
    const levels = { free: 0, low: 1, medium: 2, high: 3, heavy: 4 };
    const reverseLevels = ['free', 'low', 'medium', 'high', 'heavy'] as const;
    
    const avgLevel = trafficData.reduce((sum, data) => {
      return sum + (levels[data.level as keyof typeof levels] || 2);
    }, 0) / trafficData.length;
    
    return reverseLevels[Math.round(avgLevel)];
  }

  // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞)
  private static calculateDistance(point1: Coordinate, point2: Coordinate): number {
    const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const dLat = (point2.latitude - point1.latitude) * Math.PI / 180;
    const dLon = (point2.longitude - point1.longitude) * Math.PI / 180;
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(point1.latitude * Math.PI / 180) * Math.cos(point2.latitude * Math.PI / 180) * 
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  }

  // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –∞–¥—Ä–µ—Å—É
  static async geocodeAddress(address: string): Promise<Coordinate | null> {
    try {
      const url = `${this.BASE_URL}/geocoding/search?api_key=${this.API_KEY}&text=${encodeURIComponent(address + ', Baku, Azerbaijan')}`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);

      const response = await fetch(url, {
        signal: controller.signal,
      });
      
      clearTimeout(timeoutId);

      if (!response.ok) {
        return null;
      }

      const data = await response.json();
      if (data.features && data.features.length > 0) {
        const coords = data.features[0].geometry.coordinates;
        return {
          longitude: coords[0],
          latitude: coords[1],
        };
      }
      return null;
    } catch (error) {
      return null;
    }
  }

  // –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
  static async reverseGeocode(coordinate: Coordinate): Promise<string | null> {
    try {
      const url = `${this.BASE_URL}/geocoding/reverse?api_key=${this.API_KEY}&point.lon=${coordinate.longitude}&point.lat=${coordinate.latitude}`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);

      const response = await fetch(url, {
        signal: controller.signal,
      });
      
      clearTimeout(timeoutId);

      if (!response.ok) {
        return null;
      }

      const data = await response.json();
      if (data.features && data.features.length > 0) {
        return data.features[0].properties.label;
      }
      return null;
    } catch (error) {
      return null;
    }
  }

  // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ polyline –≥–µ–æ–º–µ—Ç—Ä–∏–∏
  private static decodePolyline(encoded: string): Coordinate[] {
    const coordinates: Coordinate[] = [];
    let index = 0;
    let lat = 0;
    let lng = 0;

    while (index < encoded.length) {
      let b;
      let shift = 0;
      let result = 0;
      
      do {
        b = encoded.charCodeAt(index++) - 63;
        result |= (b & 0x1f) << shift;
        shift += 5;
      } while (b >= 0x20);
      
      const deltaLat = ((result & 1) !== 0 ? ~(result >> 1) : (result >> 1));
      lat += deltaLat;

      shift = 0;
      result = 0;
      
      do {
        b = encoded.charCodeAt(index++) - 63;
        result |= (b & 0x1f) << shift;
        shift += 5;
      } while (b >= 0x20);
      
      const deltaLng = ((result & 1) !== 0 ? ~(result >> 1) : (result >> 1));
      lng += deltaLng;

      coordinates.push({
        latitude: lat / 1e5,
        longitude: lng / 1e5,
      });
    }

    return coordinates;
  }
}

export default RouteService;
export type { Coordinate, RouteSegment, RouteResponse }; 