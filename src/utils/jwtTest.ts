// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Å–∏—Å—Ç–µ–º—ã
import JWTService from '../services/JWTService';

// –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è production - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const ENABLE_JWT_TESTS = false;

export const runJWTTests = async () => {
  if (!ENABLE_JWT_TESTS) return;
  
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Å–∏—Å—Ç–µ–º—ã...');
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤...');
    const tokens = JWTService.generateTokens({
      userId: 'test_user_123',
      email: 'test@example.com',
      role: 'client',
      phone: '+1234567890',
    });
    console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', {
      accessToken: tokens.accessToken.substring(0, 50) + '...',
      expiresIn: tokens.expiresIn,
      refreshToken: tokens.refreshToken.substring(0, 50) + '...',
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ access token
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ access token...');
    const decodedAccess = JWTService.verifyToken(tokens.accessToken);
    console.log('‚úÖ Access token –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', decodedAccess);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ refresh token
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ refresh token...');
    const decodedRefresh = JWTService.verifyToken(tokens.refreshToken);
    console.log('‚úÖ Refresh token –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', decodedRefresh);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...');
    const isExpired = JWTService.isTokenExpired(tokens.accessToken);
    console.log('‚úÖ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫:', isExpired);
    
    const expiration = JWTService.getTokenExpiration(tokens.accessToken);
    console.log('‚úÖ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è:', expiration);

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã JWT –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö JWT:', error);
  }
};

export default runJWTTests; 