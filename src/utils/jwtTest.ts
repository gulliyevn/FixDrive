// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Å–∏—Å—Ç–µ–º—ã
import JWTService from '../services/JWTService';

export const testJWT = async () => {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Å–∏—Å—Ç–µ–º—ã...');

  try {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await JWTService.clearTokens();
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUserData = {
      userId: 'test_user_123',
      email: 'test@example.com',
      role: 'client' as const,
      phone: '+1234567890',
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤...');
    const tokens = JWTService.generateTokens(testUserData);
    console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', {
      accessToken: tokens.accessToken.substring(0, 50) + '...',
      refreshToken: tokens.refreshToken.substring(0, 50) + '...',
      expiresIn: tokens.expiresIn,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º access token
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ access token...');
    const decodedAccess = JWTService.verifyToken(tokens.accessToken);
    console.log('‚úÖ Access token –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', decodedAccess);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh token
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ refresh token...');
    const decodedRefresh = JWTService.verifyToken(tokens.refreshToken);
    console.log('‚úÖ Refresh token –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', decodedRefresh);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...');
    const isExpired = JWTService.isTokenExpired(tokens.accessToken);
    console.log('‚úÖ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫:', isExpired);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    const expiration = JWTService.getTokenExpiration(tokens.accessToken);
    console.log('‚úÖ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è:', expiration);

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã JWT –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö JWT:', error);
    return false;
  }
};

export default testJWT; 