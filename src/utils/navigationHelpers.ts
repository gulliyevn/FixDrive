// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
import { CommonActions, NavigationProp } from '@react-navigation/native';

export interface ChatNavigationParams {
  driverId: string;
  driverName: string;
  driverCar: string;
  driverNumber: string;
  driverRating: string;
  driverStatus?: string;
  driverPhoto?: string;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ Error –æ–±—ä–µ–∫—Ç–æ–º
 */
const isError = (error: unknown): error is Error => {
  return error instanceof Error;
};

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ —á–∞—Ç –∏–∑ –ª—é–±–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
 * @param navigation - –æ–±—ä–µ–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 * @param params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞
 */
export const navigateToChat = (navigation: NavigationProp<any>, params: ChatNavigationParams): boolean => {
  console.log('üöÄ NavigationHelper: –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ —á–∞—Ç —Å', params.driverName);
  
  try {
    // –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CommonActions –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    try {
      console.log('üì± –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CommonActions');
      navigation.dispatch(
        CommonActions.navigate({
          name: 'Chat',
          params: {
            screen: 'ChatConversation',
            params
          }
        })
      );
      console.log('‚úÖ –ú–µ—Ç–æ–¥ 1: CommonActions –Ω–∞–≤–∏–≥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      return true;
    } catch (error1) {
      const message = isError(error1) ? error1.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.log('‚ùå –ú–µ—Ç–æ–¥ 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', message);
    }

    // –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫–∞–∫ fallback
    try {
      console.log('üì± –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è');
      (navigation as any).navigate('Chat', {
        screen: 'ChatConversation',
        params
      });
      console.log('‚úÖ –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      return true;
    } catch (error2) {
      const message = isError(error2) ? error2.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.log('‚ùå –ú–µ—Ç–æ–¥ 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', message);
    }
    
    console.error('‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
    return false;
  } catch (error) {
    const message = isError(error) ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏';
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —á–∞—Ç:', message);
    return false;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞
 * @param driverStatus - —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è
 */
export const isDriverAvailableForChat = (driverStatus?: string): boolean => {
  return driverStatus === 'online' || driverStatus === 'busy';
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞
 * @param driver - –æ–±—ä–µ–∫—Ç –≤–æ–¥–∏—Ç–µ–ª—è
 */
export const formatDriverForChat = (driver: Record<string, any>): ChatNavigationParams => {
  return {
    driverId: driver.id || driver.driverId || 'unknown',
    driverName: driver.name || driver.driverName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å',
    driverCar: driver.car || driver.carModel || driver.driverCar || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å',
    driverNumber: driver.number || driver.carNumber || driver.driverNumber || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä',
    driverRating: (driver.rating || driver.driverRating || 0).toString(),
    driverStatus: driver.status || driver.driverStatus || (driver.isOnline ? 'online' : 'offline'),
    driverPhoto: driver.photo || driver.driverPhoto
  };
}; 