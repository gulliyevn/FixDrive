// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
import { CommonActions } from '@react-navigation/native';

export interface ChatNavigationParams {
  driverId: string;
  driverName: string;
  driverCar: string;
  driverNumber: string;
  driverRating: string;
  driverStatus?: string;
  driverPhoto?: string;
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ —á–∞—Ç –∏–∑ –ª—é–±–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
 * @param navigation - –æ–±—ä–µ–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 * @param params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞
 */
export const navigateToChat = (navigation: any, params: ChatNavigationParams) => {
  console.log('üöÄ NavigationHelper: –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ —á–∞—Ç —Å', params.driverName);
  
  try {
    // –°–ø–æ—Å–æ–± 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CommonActions –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–µ–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —á–∞—Ç—É
    try {
      console.log('üì± –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CommonActions');
      navigation.dispatch(
        CommonActions.navigate({
          name: 'Chat',
          params: {
            screen: 'ChatConversation',
            params
          }
        })
      );
      console.log('‚úÖ –ú–µ—Ç–æ–¥ 1: CommonActions –Ω–∞–≤–∏–≥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      return true;
    } catch (error1) {
      console.log('‚ùå –ú–µ—Ç–æ–¥ 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error1.message);
    }

    // –°–ø–æ—Å–æ–± 2: –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è (–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö)
    try {
      console.log('üì± –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è');
      navigation.navigate('Chat', {
        screen: 'ChatConversation',
        params
      });
      console.log('‚úÖ –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      return true;
    } catch (error2) {
      console.log('‚ùå –ú–µ—Ç–æ–¥ 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error2.message);
    }

    // –°–ø–æ—Å–æ–± 3: –ß–µ—Ä–µ–∑ getParent (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ tab navigator)
    try {
      console.log('üì± –ú–µ—Ç–æ–¥ 3: –ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ parent');
      const parent = navigation.getParent();
      if (parent) {
        parent.navigate('Chat', {
          screen: 'ChatConversation',
          params
        });
        console.log('‚úÖ –ú–µ—Ç–æ–¥ 3: Parent –Ω–∞–≤–∏–≥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        return true;
      }
    } catch (error3) {
      console.log('‚ùå –ú–µ—Ç–æ–¥ 3 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error3.message);
    }

    // –°–ø–æ—Å–æ–± 4: –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Chat –≤–∫–ª–∞–¥–∫—É, –ø–æ—Ç–æ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω
    try {
      console.log('üì± –ú–µ—Ç–æ–¥ 4: –ü–æ—ç—Ç–∞–ø–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è');
      // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É Chat
      navigation.navigate('Chat');
      // –ß–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω
      setTimeout(() => {
        navigation.navigate('Chat', {
          screen: 'ChatConversation',
          params
        });
      }, 100);
      console.log('‚úÖ –ú–µ—Ç–æ–¥ 4: –ü–æ—ç—Ç–∞–ø–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
      return true;
    } catch (error4) {
      console.log('‚ùå –ú–µ—Ç–æ–¥ 4 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error4.message);
    }

    // –°–ø–æ—Å–æ–± 5: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    try {
      console.log('üì± –ú–µ—Ç–æ–¥ 5: –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
      navigation.dispatch(
        CommonActions.reset({
          index: 0,
          routes: [
            {
              name: 'Chat',
              params: {
                screen: 'ChatConversation',
                params
              }
            }
          ]
        })
      );
      console.log('‚úÖ –ú–µ—Ç–æ–¥ 5: –°–±—Ä–æ—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —É—Å–ø–µ—à–µ–Ω');
      return true;  
    } catch (error5) {
      console.log('‚ùå –ú–µ—Ç–æ–¥ 5 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error5.message);
    }
    
    console.error('‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
    return false;
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —á–∞—Ç:', error);
    return false;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞
 * @param driverStatus - —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è
 */
export const isDriverAvailableForChat = (driverStatus?: string): boolean => {
  return driverStatus === 'online' || driverStatus === 'busy';
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞
 * @param driver - –æ–±—ä–µ–∫—Ç –≤–æ–¥–∏—Ç–µ–ª—è
 */
export const formatDriverForChat = (driver: any): ChatNavigationParams => {
  return {
    driverId: driver.id || driver.driverId || 'unknown',
    driverName: driver.name || driver.driverName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å',
    driverCar: driver.car || driver.carModel || driver.driverCar || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å',
    driverNumber: driver.number || driver.carNumber || driver.driverNumber || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä',
    driverRating: (driver.rating || driver.driverRating || 0).toString(),
    driverStatus: driver.status || driver.driverStatus || (driver.isOnline ? 'online' : 'offline'),
    driverPhoto: driver.photo || driver.driverPhoto
  };
}; 