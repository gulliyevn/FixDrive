import AsyncStorage from '@react-native-async-storage/async-storage';
import { JWTService } from '../services/JWTService';

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
 */
export class TokenUtils {
  private static readonly ACCESS_TOKEN_KEY = 'fixdrive_access_token';
  private static readonly REFRESH_TOKEN_KEY = 'fixdrive_refresh_token';

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ AsyncStorage
   */
  static async clearAllTokens(): Promise<void> {
    try {
      await AsyncStorage.multiRemove([
        this.ACCESS_TOKEN_KEY,
        this.REFRESH_TOKEN_KEY,
      ]);
      console.log('‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ AsyncStorage
   */
  static async checkTokens(): Promise<{
    hasAccessToken: boolean;
    hasRefreshToken: boolean;
    accessTokenValid: boolean;
    refreshTokenValid: boolean;
  }> {
    try {
      const accessToken = await AsyncStorage.getItem(this.ACCESS_TOKEN_KEY);
      const refreshToken = await AsyncStorage.getItem(this.REFRESH_TOKEN_KEY);

      const hasAccessToken = !!accessToken;
      const hasRefreshToken = !!refreshToken;

      let accessTokenValid = false;
      let refreshTokenValid = false;

      if (accessToken) {
        try {
          const payload = await JWTService.verifyToken(accessToken);
          accessTokenValid = !!payload;
        } catch (error) {
          console.log('‚ùå Access token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', error.message);
        }
      }

      if (refreshToken) {
        try {
          const payload = await JWTService.verifyToken(refreshToken);
          refreshTokenValid = !!payload;
        } catch (error) {
          console.log('‚ùå Refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', error.message);
        }
      }

      return {
        hasAccessToken,
        hasRefreshToken,
        accessTokenValid,
        refreshTokenValid,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return {
        hasAccessToken: false,
        hasRefreshToken: false,
        accessTokenValid: false,
        refreshTokenValid: false,
      };
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  static async debugTokens(): Promise<void> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤...');
    
    const tokenInfo = await this.checkTokens();
    
    console.log('üìä –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–æ–≤:');
    console.log(`  Access Token: ${tokenInfo.hasAccessToken ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} ${tokenInfo.accessTokenValid ? '(‚úÖ –í–∞–ª–∏–¥–µ–Ω)' : '(‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω)'}`);
    console.log(`  Refresh Token: ${tokenInfo.hasRefreshToken ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} ${tokenInfo.refreshTokenValid ? '(‚úÖ –í–∞–ª–∏–¥–µ–Ω)' : '(‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω)'}`);
    
    if (tokenInfo.hasAccessToken) {
      try {
        const accessToken = await AsyncStorage.getItem(this.ACCESS_TOKEN_KEY);
        const payload = JWTService.decode(accessToken!);
        if (payload) {
          console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
          console.log(`  ID: ${payload.userId}`);
          console.log(`  Email: ${payload.email}`);
          console.log(`  Role: ${payload.role}`);
          console.log(`  Phone: ${payload.phone}`);
          console.log(`  Issued: ${new Date(payload.iat! * 1000).toLocaleString()}`);
          console.log(`  Expires: ${new Date(payload.exp! * 1000).toLocaleString()}`);
        }
      } catch (error) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å access token');
      }
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async forceRefreshTokens(): Promise<boolean> {
    try {
      const currentUser = await JWTService.getCurrentUser();
      
      if (!currentUser) {
        console.log('‚ùå –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
      }

      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...');
      
      await JWTService.forceRefreshTokens({
        userId: currentUser.userId,
        email: currentUser.email,
        role: currentUser.role,
        phone: currentUser.phone,
      });

      console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
   */
  static async resetTokens(): Promise<boolean> {
    try {
      console.log('üîÑ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–æ–≤...');
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
      await this.clearAllTokens();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã
      const tokenInfo = await this.checkTokens();
      
      if (tokenInfo.hasAccessToken || tokenInfo.hasRefreshToken) {
        console.log('‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã');
        return false;
      }

      console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
if (__DEV__) {
  (global as Record<string, unknown>).TokenUtils = TokenUtils;
  console.log('üîß TokenUtils –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª–∏ –∫–∞–∫ global.TokenUtils');
  console.log('üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:');
  console.log('  TokenUtils.clearAllTokens() - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã');
  console.log('  TokenUtils.debugTokens() - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö');
  console.log('  TokenUtils.forceRefreshTokens() - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã');
  console.log('  TokenUtils.resetTokens() - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–æ–≤');
} 