import { useState, useEffect, useCallback } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Haptics from 'expo-haptics';
import { DriverLevel, LEVEL_CONFIG, LEVEL_BONUSES, VIP_CONFIG } from '../types/earningsLevel.types';
import { generateRandomTrip } from '../../../constants/tripPricing';
import { useBalance } from '../../../hooks/useBalance';

const LEVEL_PROGRESS_KEY = '@driver_level_progress';

export const useEarningsLevel = () => {
  const { topUpBalance } = useBalance() as any;
  
  const [driverLevel, setDriverLevel] = useState<DriverLevel>({
    currentLevel: 1,
    currentSubLevel: 1,
    currentProgress: 0,
    maxProgress: 40,
    title: '–°—Ç–∞—Ä—Ç–µ—Ä',
    subLevelTitle: '–°—Ç–∞—Ä—Ç–µ—Ä 1',
    icon: 'ü•â',
    nextReward: '2',
    isRewardAvailable: false,
    isVIP: false,
    vipDaysOnline: 0,
    vipDaysRequired: 30,
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadLevelProgress();
  }, []);

  const loadLevelProgress = async () => {
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      await AsyncStorage.removeItem(LEVEL_PROGRESS_KEY);
      const initialLevel: DriverLevel = {
        currentLevel: 1,
        currentSubLevel: 1,
        currentProgress: 0,
        maxProgress: 40,
        title: '–°—Ç–∞—Ä—Ç–µ—Ä',
        subLevelTitle: '–°—Ç–∞—Ä—Ç–µ—Ä 1',
        icon: 'ü•â',
        nextReward: '2',
        isRewardAvailable: false,
        isVIP: false,
        vipDaysOnline: 0,
        vipDaysRequired: 30,
      };
      setDriverLevel(initialLevel);
      await saveLevelProgress(initialLevel);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è:', error);
      const initialLevel: DriverLevel = {
        currentLevel: 1,
        currentSubLevel: 1,
        currentProgress: 0,
        maxProgress: 40,
        title: '–°—Ç–∞—Ä—Ç–µ—Ä',
        subLevelTitle: '–°—Ç–∞—Ä—Ç–µ—Ä 1',
        icon: 'ü•â',
        nextReward: '2',
        isRewardAvailable: false,
        isVIP: false,
        vipDaysOnline: 0,
        vipDaysRequired: 30,
      };
      setDriverLevel(initialLevel);
    }
  };

  const saveLevelProgress = async (progress: DriverLevel) => {
    try {
      await AsyncStorage.setItem(LEVEL_PROGRESS_KEY, JSON.stringify(progress));
      setDriverLevel(progress);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const resetProgress = async () => {
    try {
      await AsyncStorage.removeItem(LEVEL_PROGRESS_KEY);
      const initialLevel: DriverLevel = {
        currentLevel: 1,
        currentSubLevel: 1,
        currentProgress: 0,
        maxProgress: 40,
        title: '–°—Ç–∞—Ä—Ç–µ—Ä',
        subLevelTitle: '–°—Ç–∞—Ä—Ç–µ—Ä 1',
        icon: 'ü•â',
        nextReward: '2',
        isRewardAvailable: false,
        isVIP: false,
        vipDaysOnline: 0,
        vipDaysRequired: 30,
      };
      setDriverLevel(initialLevel);
      await saveLevelProgress(initialLevel);
      console.log('Progress reset to initial state');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –∏ –ø–æ–¥—É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–µ–∑–¥–æ–∫
  const calculateLevelAndSubLevel = (totalRides: number) => {
    console.log('üî¥ calculateLevelAndSubLevel - –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫:', totalRides);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP —Å—Ç–∞—Ç—É—Å (4000+ –ø–æ–µ–∑–¥–æ–∫)
    if (totalRides >= VIP_CONFIG.minRides) {
      console.log('üî¥ VIP —É—Ä–æ–≤–µ–Ω—å');
      return {
        level: 7, // VIP —É—Ä–æ–≤–µ–Ω—å
        subLevel: 1,
        maxProgress: VIP_CONFIG.daysRequired,
        title: VIP_CONFIG.title,
        subLevelTitle: VIP_CONFIG.title,
        icon: VIP_CONFIG.icon,
        nextReward: `${VIP_CONFIG.monthlyBonuses[20]}`, // –ë–∞–∑–æ–≤—ã–π VIP –±–æ–Ω—É—Å
      };
    }
    
    let accumulatedRides = 0;
    
    for (let level = 1; level <= 6; level++) {
      const config = LEVEL_CONFIG[level as keyof typeof LEVEL_CONFIG];
      console.log('üî¥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å', level, '-', config.title);
      
      for (let subLevel = 0; subLevel < 3; subLevel++) {
        const subLevelRides = config.subLevels[subLevel];
        const previousRides = accumulatedRides;
        accumulatedRides += subLevelRides;
        
        console.log('üî¥ –ü–æ–¥—É—Ä–æ–≤–µ–Ω—å', subLevel + 1, '- –¥–∏–∞–ø–∞–∑–æ–Ω:', previousRides + 1, '–¥–æ', accumulatedRides, '–ø–æ–µ–∑–¥–æ–∫');
        
        if (totalRides <= accumulatedRides) {
          const progressInSubLevel = totalRides - previousRides;
          console.log('üî¥ –ù–ê–ô–î–ï–ù –£–†–û–í–ï–ù–¨:', level, subLevel + 1, config.title);
          console.log('üî¥ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø–æ–¥—É—Ä–æ–≤–Ω–µ:', progressInSubLevel, '/', subLevelRides);
          
          return {
            level,
            subLevel: subLevel + 1,
            maxProgress: subLevelRides,
            title: config.title,
            subLevelTitle: `${config.title} ${subLevel + 1}`,
            icon: config.icon,
            nextReward: `${LEVEL_BONUSES[level as keyof typeof LEVEL_BONUSES][subLevel]}`,
          };
        }
      }
    }
    
    // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    console.log('üî¥ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å - –ò–º–ø–µ—Ä–∞—Ç–æ—Ä 3');
    return {
      level: 6,
      subLevel: 3,
      maxProgress: 4000,
      title: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä',
      subLevelTitle: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä 3',
      icon: 'üëë',
      nextReward: '500',
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ +1 –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏
  const incrementProgress = useCallback(async () => {
    const newProgress = driverLevel.currentProgress + 1;
    const newTotalRides = getTotalRidesForLevel(driverLevel.currentLevel, driverLevel.currentSubLevel, newProgress);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ –ø–æ–¥—É—Ä–æ–≤–µ–Ω—å
    const newLevelInfo = calculateLevelAndSubLevel(newTotalRides);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è
    let correctProgress = newProgress;
    if (newLevelInfo.level !== driverLevel.currentLevel || newLevelInfo.subLevel !== driverLevel.currentSubLevel) {
      // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
      let accumulatedRides = 0;
      
      // –°—É–º–º–∏—Ä—É–µ–º –ø–æ–µ–∑–¥–∫–∏ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
      for (let l = 1; l < newLevelInfo.level; l++) {
        const config = LEVEL_CONFIG[l as keyof typeof LEVEL_CONFIG];
        accumulatedRides += config.subLevels[2]; // –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–µ–∑–¥–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è
      const currentConfig = LEVEL_CONFIG[newLevelInfo.level as keyof typeof LEVEL_CONFIG];
      for (let s = 0; s < newLevelInfo.subLevel - 1; s++) {
        accumulatedRides += currentConfig.subLevels[s];
      }
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–¥—É—Ä–æ–≤–Ω–µ
      correctProgress = newTotalRides - accumulatedRides;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è
    if (newLevelInfo.level !== driverLevel.currentLevel || newLevelInfo.subLevel !== driverLevel.currentSubLevel) {
      // –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –ø–æ–¥—É—Ä–æ–≤–Ω—è
      const updatedLevel: DriverLevel = {
        currentLevel: newLevelInfo.level,
        currentSubLevel: newLevelInfo.subLevel,
        currentProgress: correctProgress, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        maxProgress: newLevelInfo.maxProgress,
        title: newLevelInfo.title,
        subLevelTitle: newLevelInfo.subLevelTitle,
        icon: newLevelInfo.icon,
        nextReward: newLevelInfo.nextReward,
        isRewardAvailable: true,
        isVIP: newLevelInfo.level >= 7,
        vipDaysOnline: driverLevel.vipDaysOnline,
        vipDaysRequired: 30,
      };
      
      await saveLevelProgress(updatedLevel);
      
      // –°–∏–ª—å–Ω—ã–π haptic feedback –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
    } else {
      // –ü—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const updatedLevel: DriverLevel = {
        ...driverLevel,
        currentProgress: correctProgress,
        isRewardAvailable: correctProgress >= driverLevel.maxProgress,
      };
      
      await saveLevelProgress(updatedLevel);
      
      // –õ–µ–≥–∫–∏–π haptic feedback –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    }
  }, [driverLevel]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–µ–∑–¥–æ–∫ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const addRides = useCallback(async (count: number) => {
    console.log('üî¥ –ù–ê–ß–ê–õ–û addRides - –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:', driverLevel.title, driverLevel.currentSubLevel);
    console.log('üî¥ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:', driverLevel.currentProgress, '/', driverLevel.maxProgress);
    
    let currentLevel = { ...driverLevel };
    let totalEarnings = 0; // –°—É–º–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏
    
    for (let i = 0; i < count; i++) {
      console.log(`\nüîÑ –ò–¢–ï–†–ê–¶–ò–Ø ${i + 1}/${count}`);
      console.log('üî¥ –î–æ –ø–æ–µ–∑–¥–∫–∏ - –£—Ä–æ–≤–µ–Ω—å:', currentLevel.title, currentLevel.currentSubLevel);
      console.log('üî¥ –î–æ –ø–æ–µ–∑–¥–∫–∏ - –ü—Ä–æ–≥—Ä–µ—Å—Å:', currentLevel.currentProgress, '/', currentLevel.maxProgress);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–µ–∑–¥–∫—É —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
      const trip = generateRandomTrip(currentLevel.currentLevel, 4.8);
      console.log('üî¥ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏:', trip.price, 'AFc');
      
      // –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ (–Ω–æ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –±–∞–ª–∞–Ω—Å—É)
      totalEarnings += trip.price;
      console.log('üî¥ –ù–∞–∫–æ–ø–ª–µ–Ω–æ:', totalEarnings, 'AFc');
      
      const newProgress = currentLevel.currentProgress + 1;
      const newTotalRides = getTotalRidesForLevel(currentLevel.currentLevel, currentLevel.currentSubLevel, newProgress);
      console.log('üî¥ –ù–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å:', newProgress);
      console.log('üî¥ –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫:', newTotalRides);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ –ø–æ–¥—É—Ä–æ–≤–µ–Ω—å
      const newLevelInfo = calculateLevelAndSubLevel(newTotalRides);
      console.log('üî¥ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:', newLevelInfo.level, newLevelInfo.subLevel, newLevelInfo.title);
      console.log('üî¥ –ù–æ–≤—ã–π –±–æ–Ω—É—Å:', newLevelInfo.nextReward);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è
      let correctProgress = newProgress;
      if (newLevelInfo.level !== currentLevel.currentLevel || newLevelInfo.subLevel !== currentLevel.currentSubLevel) {
        // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        let accumulatedRides = 0;
        
        // –°—É–º–º–∏—Ä—É–µ–º –ø–æ–µ–∑–¥–∫–∏ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        for (let l = 1; l < newLevelInfo.level; l++) {
          const config = LEVEL_CONFIG[l as keyof typeof LEVEL_CONFIG];
          accumulatedRides += config.subLevels[2]; // –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–µ–∑–¥–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è
        const currentConfig = LEVEL_CONFIG[newLevelInfo.level as keyof typeof LEVEL_CONFIG];
        for (let s = 0; s < newLevelInfo.subLevel - 1; s++) {
          accumulatedRides += currentConfig.subLevels[s];
        }
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–¥—É—Ä–æ–≤–Ω–µ
        correctProgress = newTotalRides - accumulatedRides;
        console.log('üî¥ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è:', correctProgress);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è
      const isLevelUp = newLevelInfo.level !== currentLevel.currentLevel || newLevelInfo.subLevel !== currentLevel.currentSubLevel;
      console.log('üî¥ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è:', isLevelUp ? '–î–ê' : '–ù–ï–¢');
      
      if (isLevelUp) {
        console.log('üî¥ –ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø!');
        // –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –ø–æ–¥—É—Ä–æ–≤–Ω—è
        const updatedLevel: DriverLevel = {
          currentLevel: newLevelInfo.level,
          currentSubLevel: newLevelInfo.subLevel,
          currentProgress: correctProgress, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
          maxProgress: newLevelInfo.maxProgress,
          title: newLevelInfo.title,
          subLevelTitle: newLevelInfo.subLevelTitle,
          icon: newLevelInfo.icon,
          nextReward: newLevelInfo.nextReward,
          isRewardAvailable: true,
          isVIP: newLevelInfo.level >= 7,
          vipDaysOnline: currentLevel.vipDaysOnline,
          vipDaysRequired: 30,
        };
        
        console.log('üî¥ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å...');
        await saveLevelProgress(updatedLevel);
        currentLevel = updatedLevel; // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
        console.log('üî¥ –£—Ä–æ–≤–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', currentLevel.title, currentLevel.currentSubLevel);
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        const bonusAmount = parseInt(newLevelInfo.nextReward);
        console.log('üî¥ –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å:', bonusAmount, 'AFc');
        await topUpBalance(bonusAmount);
        
        // –°–∏–ª—å–Ω—ã–π haptic feedback –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
        
        console.log(`üöó –ü–æ–µ–∑–¥–∫–∞ ${i + 1}: +${trip.price} AFc | –£—Ä–æ–≤–µ–Ω—å: ${newLevelInfo.title} ${newLevelInfo.subLevel} | –ë–æ–Ω—É—Å: +${bonusAmount} AFc`);
      } else {
        console.log('üî¥ –û–±—ã—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å');
        // –ü—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const updatedLevel: DriverLevel = {
          ...currentLevel,
          currentProgress: correctProgress,
          isRewardAvailable: correctProgress >= currentLevel.maxProgress,
        };
        
        console.log('üî¥ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...');
        await saveLevelProgress(updatedLevel);
        currentLevel = updatedLevel; // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
        console.log('üî¥ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', currentLevel.currentProgress, '/', currentLevel.maxProgress);
        
        // –õ–µ–≥–∫–∏–π haptic feedback –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
        
        console.log(`üöó –ü–æ–µ–∑–¥–∫–∞ ${i + 1}: +${trip.price} AFc | –ü—Ä–æ–≥—Ä–µ—Å—Å: ${correctProgress}/${currentLevel.maxProgress}`);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫ –±–∞–ª–∞–Ω—Å—É
    console.log('üî¥ –î–æ–±–∞–≤–ª—è–µ–º –∫ –±–∞–ª–∞–Ω—Å—É:', totalEarnings, 'AFc');
    await topUpBalance(totalEarnings);
    console.log(`üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ ${count} –ø–æ–µ–∑–¥–æ–∫: +${totalEarnings} AFc`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ driverLevel
    console.log('üî¥ –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
    setDriverLevel(currentLevel);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await saveLevelProgress(currentLevel);
    
    console.log('üî¥ –ö–û–ù–ï–¶ addRides - –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:', currentLevel.title, currentLevel.currentSubLevel);
    console.log('üî¥ –ö–û–ù–ï–¶ addRides - –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å:', currentLevel.currentProgress, '/', currentLevel.maxProgress);
    console.log('üî¥ –ö–û–ù–ï–¶ addRides - –§–∏–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å:', currentLevel.nextReward);
  }, [driverLevel, topUpBalance, setDriverLevel]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è —É—Ä–æ–≤–Ω—è –∏ –ø–æ–¥—É—Ä–æ–≤–Ω—è
  const getTotalRidesForLevel = (level: number, subLevel: number, progress: number) => {
    console.log('üî¥ getTotalRidesForLevel - –í—Ö–æ–¥:', level, subLevel, progress);
    
    let totalRides = 0;
    
    // –°—É–º–º–∏—Ä—É–µ–º –ø–æ–µ–∑–¥–∫–∏ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
    for (let l = 1; l < level; l++) {
      const config = LEVEL_CONFIG[l as keyof typeof LEVEL_CONFIG];
      const maxForLevel = config.subLevels[2]; // –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
      totalRides += maxForLevel;
      console.log('üî¥ –£—Ä–æ–≤–µ–Ω—å', l, '- –¥–æ–±–∞–≤–ª—è–µ–º:', maxForLevel, '=', totalRides);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–µ–∑–¥–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è
    const currentConfig = LEVEL_CONFIG[level as keyof typeof LEVEL_CONFIG];
    for (let s = 0; s < subLevel - 1; s++) {
      totalRides += currentConfig.subLevels[s];
      console.log('üî¥ –ü–æ–¥—É—Ä–æ–≤–µ–Ω—å', s + 1, '- –¥–æ–±–∞–≤–ª—è–µ–º:', currentConfig.subLevels[s], '=', totalRides);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    totalRides += progress;
    console.log('üî¥ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å - –¥–æ–±–∞–≤–ª—è–µ–º:', progress, '=', totalRides);
    
    console.log('üî¥ getTotalRidesForLevel - –ò—Ç–æ–≥–æ:', totalRides);
    return totalRides;
  };

  // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VIP —Å–∏—Å—Ç–µ–º—ã
  const testVIPStatus = async () => {
    const vipTestLevel: DriverLevel = {
      currentLevel: 7,
      currentSubLevel: 1,
      currentProgress: 0,
      maxProgress: 30,
      title: 'VIP',
      subLevelTitle: 'VIP',
      icon: 'üíé',
      nextReward: '50',
      isRewardAvailable: false,
      isVIP: true,
      vipDaysOnline: 15,
      vipDaysRequired: 30,
    };
    
    await saveLevelProgress(vipTestLevel);
    console.log('VIP status test applied - nextReward:', vipTestLevel.nextReward);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const clearAllData = async () => {
    try {
      await AsyncStorage.removeItem(LEVEL_PROGRESS_KEY);
      const cleanLevel: DriverLevel = {
        currentLevel: 1,
        currentSubLevel: 1,
        currentProgress: 0,
        maxProgress: 40,
        title: '–°—Ç–∞—Ä—Ç–µ—Ä',
        subLevelTitle: '–°—Ç–∞—Ä—Ç–µ—Ä 1',
        icon: 'ü•â',
        nextReward: '2',
        isRewardAvailable: false,
        isVIP: false,
        vipDaysOnline: 0,
        vipDaysRequired: 30,
      };
      setDriverLevel(cleanLevel);
      await saveLevelProgress(cleanLevel);
      
      console.log('All data cleared and reset to clean state');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  return {
    driverLevel,
    incrementProgress,
    addRides,
    resetProgress,
    testVIPStatus,
    clearAllData,
  };
};
