import { useState, useEffect, useCallback } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Haptics from 'expo-haptics';
import { DriverLevel, LEVEL_CONFIG, LEVEL_BONUSES } from '../types/earningsLevel.types';

const LEVEL_PROGRESS_KEY = '@driver_level_progress';

export const useEarningsLevel = () => {
  const [driverLevel, setDriverLevel] = useState<DriverLevel>({
    currentLevel: 1,
    currentSubLevel: 1,
    currentProgress: 0,
    maxProgress: 40,
    title: '–°—Ç–∞—Ä—Ç–µ—Ä',
    subLevelTitle: '–°—Ç–∞—Ä—Ç–µ—Ä 1',
    icon: 'ü•â',
    nextReward: '+2 AFc',
    isRewardAvailable: false,
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadLevelProgress();
  }, []);

  const loadLevelProgress = async () => {
    try {
      const savedProgress = await AsyncStorage.getItem(LEVEL_PROGRESS_KEY);
      if (savedProgress) {
        const parsedProgress = JSON.parse(savedProgress);
        
        // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
        const migratedProgress: DriverLevel = {
          currentLevel: parsedProgress.currentLevel || 1,
          currentSubLevel: parsedProgress.currentSubLevel || 1,
          currentProgress: parsedProgress.currentProgress || 0,
          maxProgress: parsedProgress.maxProgress || 40,
          title: parsedProgress.title || '–°—Ç–∞—Ä—Ç–µ—Ä',
          subLevelTitle: parsedProgress.subLevelTitle || '–°—Ç–∞—Ä—Ç–µ—Ä 1',
          icon: parsedProgress.icon || 'ü•â',
          nextReward: parsedProgress.nextReward || '+2 AFc',
          isRewardAvailable: parsedProgress.isRewardAvailable || false,
        };
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (!parsedProgress.subLevelTitle) {
          const totalRides = getTotalRidesForLevel(migratedProgress.currentLevel, migratedProgress.currentSubLevel, migratedProgress.currentProgress);
          const newLevelInfo = calculateLevelAndSubLevel(totalRides);
          
          migratedProgress.currentLevel = newLevelInfo.level;
          migratedProgress.currentSubLevel = newLevelInfo.subLevel;
          migratedProgress.maxProgress = newLevelInfo.maxProgress;
          migratedProgress.title = newLevelInfo.title;
          migratedProgress.subLevelTitle = newLevelInfo.subLevelTitle;
          migratedProgress.icon = newLevelInfo.icon;
          migratedProgress.nextReward = newLevelInfo.nextReward;
        }
        
        setDriverLevel(migratedProgress);
        console.log('Loaded and migrated driver level:', migratedProgress);
      } else {
        console.log('No saved progress found, using default');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await saveLevelProgress(driverLevel);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è:', error);
    }
  };

  const saveLevelProgress = async (progress: DriverLevel) => {
    try {
      await AsyncStorage.setItem(LEVEL_PROGRESS_KEY, JSON.stringify(progress));
      setDriverLevel(progress);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const resetProgress = async () => {
    try {
      await AsyncStorage.removeItem(LEVEL_PROGRESS_KEY);
      const initialLevel: DriverLevel = {
        currentLevel: 1,
        currentSubLevel: 1,
        currentProgress: 0,
        maxProgress: 40,
        title: '–°—Ç–∞—Ä—Ç–µ—Ä',
        subLevelTitle: '–°—Ç–∞—Ä—Ç–µ—Ä 1',
        icon: 'ü•â',
        nextReward: '+2 AFc',
        isRewardAvailable: false,
      };
      setDriverLevel(initialLevel);
      await saveLevelProgress(initialLevel);
      console.log('Progress reset to initial state');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –∏ –ø–æ–¥—É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–µ–∑–¥–æ–∫
  const calculateLevelAndSubLevel = (totalRides: number) => {
    for (let level = 1; level <= 6; level++) {
      const config = LEVEL_CONFIG[level as keyof typeof LEVEL_CONFIG];
      for (let subLevel = 0; subLevel < 3; subLevel++) {
        if (totalRides <= config.subLevels[subLevel]) {
          return {
            level,
            subLevel: subLevel + 1,
            maxProgress: config.subLevels[subLevel],
            title: config.title,
            subLevelTitle: `${config.title} ${subLevel + 1}`,
            icon: config.icon,
            nextReward: `+${LEVEL_BONUSES[level as keyof typeof LEVEL_BONUSES][subLevel]} AFc`,
          };
        }
      }
    }
    
    // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    return {
      level: 6,
      subLevel: 3,
      maxProgress: 4000,
      title: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä',
      subLevelTitle: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä 3',
      icon: 'üëë',
      nextReward: '+500 AFc',
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ +1 –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏
  const incrementProgress = useCallback(async () => {
    const newProgress = driverLevel.currentProgress + 1;
    const newTotalRides = getTotalRidesForLevel(driverLevel.currentLevel, driverLevel.currentSubLevel, newProgress);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ –ø–æ–¥—É—Ä–æ–≤–µ–Ω—å
    const newLevelInfo = calculateLevelAndSubLevel(newTotalRides);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è
    if (newLevelInfo.level !== driverLevel.currentLevel || newLevelInfo.subLevel !== driverLevel.currentSubLevel) {
      // –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –ø–æ–¥—É—Ä–æ–≤–Ω—è
      const updatedLevel: DriverLevel = {
        currentLevel: newLevelInfo.level,
        currentSubLevel: newLevelInfo.subLevel,
        currentProgress: 0, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è
        maxProgress: newLevelInfo.maxProgress,
        title: newLevelInfo.title,
        subLevelTitle: newLevelInfo.subLevelTitle,
        icon: newLevelInfo.icon,
        nextReward: newLevelInfo.nextReward,
        isRewardAvailable: true,
      };
      
      await saveLevelProgress(updatedLevel);
      
      // –°–∏–ª—å–Ω—ã–π haptic feedback –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
    } else {
      // –ü—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const updatedLevel: DriverLevel = {
        ...driverLevel,
        currentProgress: newProgress,
        isRewardAvailable: newProgress >= driverLevel.maxProgress,
      };
      
      await saveLevelProgress(updatedLevel);
      
      // –õ–µ–≥–∫–∏–π haptic feedback –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    }
  }, [driverLevel]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è —É—Ä–æ–≤–Ω—è –∏ –ø–æ–¥—É—Ä–æ–≤–Ω—è
  const getTotalRidesForLevel = (level: number, subLevel: number, progress: number) => {
    if (level === 1) {
      return progress;
    }
    
    // –°—É–º–º–∏—Ä—É–µ–º –ø–æ–µ–∑–¥–∫–∏ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
    let totalRides = 0;
    for (let l = 1; l < level; l++) {
      const config = LEVEL_CONFIG[l as keyof typeof LEVEL_CONFIG];
      totalRides += config.subLevels[2]; // –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–µ–∑–¥–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è
    if (subLevel === 1) {
      totalRides += progress;
    } else {
      const config = LEVEL_CONFIG[level as keyof typeof LEVEL_CONFIG];
      totalRides += config.subLevels[subLevel - 2] + progress;
    }
    
    return totalRides;
  };

  return {
    driverLevel,
    incrementProgress,
    resetProgress,
  };
};
