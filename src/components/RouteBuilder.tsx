import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, Alert, ScrollView, TextInput } from 'react-native';
import { RoutePoint } from '../types/package';
import { useTheme } from '../context/ThemeContext';
import Button from './Button';
import { RouteBuilderStyles } from '../styles/components/RouteBuilder.styles';

interface RouteBuilderProps {
  route: RoutePoint[];
  onRouteChange: (route: RoutePoint[]) => void;
  onRouteCalculated?: (distance: number, duration: number, price: number) => void;
}

const RouteBuilder: React.FC<RouteBuilderProps> = ({
  route,
  onRouteChange,
  onRouteCalculated,
}) => {
  const { isDark } = useTheme();
  const [isCalculating, setIsCalculating] = useState(false);

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
  const addRoutePoint = () => {
    const newPoint: RoutePoint = {
      id: Date.now().toString(),
      address: '',
      latitude: 0,
      longitude: 0,
      order: route.length,
      description: getPointDescription(route.length),
    };

    onRouteChange([...route, newPoint]);
  };

  // –£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
  const removeRoutePoint = (pointId: string) => {
    if (route.length <= 2) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ú–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏');
      return;
    }

    const updatedRoute = route
      .filter(point => point.id !== pointId)
      .map((point, index) => ({
        ...point,
        order: index,
        description: getPointDescription(index),
      }));

    onRouteChange(updatedRoute);
  };

  // –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏
  const updatePointAddress = (pointId: string, address: string) => {
    const updatedRoute = route.map(point =>
      point.id === pointId ? { ...point, address } : point
    );
    onRouteChange(updatedRoute);
  };

  // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–æ—á–∫—É –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑
  const movePoint = (pointId: string, direction: 'up' | 'down') => {
    const currentIndex = route.findIndex(point => point.id === pointId);
    const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;

    if (newIndex < 0 || newIndex >= route.length) return;

    const updatedRoute = [...route];
    [updatedRoute[currentIndex], updatedRoute[newIndex]] = 
    [updatedRoute[newIndex], updatedRoute[currentIndex]];

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    const reorderedRoute = updatedRoute.map((point, index) => ({
      ...point,
      order: index,
      description: getPointDescription(index),
    }));

    onRouteChange(reorderedRoute);
  };

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
  const getPointDescription = (index: number): string => {
    if (index === 0) return '–¢–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è';
    if (route.length > 2 && index === route.length - 1) return '–¢–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è';
    if (route.length === 2 && index === 1) return '–¢–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è';
    return `–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ ${index}`;
  };

  // –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ç–æ—á–∫–∏
  const getPointIcon = (index: number): string => {
    if (index === 0) return 'üü¢'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
    if (route.length > 2 && index === route.length - 1) return 'üî¥'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Ñ–∏–Ω–∏—à–∞
    if (route.length === 2 && index === 1) return 'üî¥';
    return 'üü°'; // –ñ–µ–ª—Ç—ã–π –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö
  };

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç
  const calculateRoute = async () => {
    const filledPoints = route.filter(point => point.address.trim());
    
    if (filledPoints.length < 2) {
      Alert.alert('–û—à–∏–±–∫–∞', '–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞');
      return;
    }

    setIsCalculating(true);
    
    try {
      // Mock —Ä–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const distance = filledPoints.length * 3.5; // –ø—Ä–∏–º–µ—Ä–Ω–æ 3.5 –∫–º –Ω–∞ —Ç–æ—á–∫—É
      const duration = filledPoints.length * 8; // –ø—Ä–∏–º–µ—Ä–Ω–æ 8 –º–∏–Ω—É—Ç –Ω–∞ —Ç–æ—á–∫—É
      const basePrice = 15 + distance * 1.8; // –±–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ + –∑–∞ –∫–º

      onRouteCalculated?.(
        Math.round(distance * 10) / 10,
        Math.round(duration),
        Math.round(basePrice)
      );
    } catch {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç');
    } finally {
      setIsCalculating(false);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏, –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –ø—É—Å—Ç–æ–π
  useEffect(() => {
    if (route.length === 0) {
      const initialRoute: RoutePoint[] = [
        {
          id: '1',
          address: '',
          latitude: 0,
          longitude: 0,
          order: 0,
          description: '–¢–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        },
        {
          id: '2',
          address: '',
          latitude: 0,
          longitude: 0,
          order: 1,
          description: '–¢–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
        },
      ];
      onRouteChange(initialRoute);
    }
  }, [route.length, onRouteChange]);

  return (
    <View style={RouteBuilderStyles.container}>
      <Text style={[
        RouteBuilderStyles.title,
        isDark ? RouteBuilderStyles.titleDark : RouteBuilderStyles.titleLight
      ]}>
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
      </Text>

      <ScrollView style={RouteBuilderStyles.pointsList} showsVerticalScrollIndicator={false}>
        {route.map((point, index) => (
          <View key={point.id} style={RouteBuilderStyles.pointContainer}>
            <View style={RouteBuilderStyles.pointHeader}>
              <Text style={RouteBuilderStyles.pointIcon}>{getPointIcon(index)}</Text>
              <Text style={[
                RouteBuilderStyles.pointDescription,
                isDark ? RouteBuilderStyles.pointDescriptionDark : RouteBuilderStyles.pointDescriptionLight
              ]}>
                {point.description}
              </Text>
              
              {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∞–º–∏ */}
              <View style={RouteBuilderStyles.pointControls}>
                {index > 0 && (
                  <TouchableOpacity
                    onPress={() => movePoint(point.id, 'up')}
                    style={RouteBuilderStyles.controlButton}
                  >
                    <Text style={RouteBuilderStyles.controlText}>‚Üë</Text>
                  </TouchableOpacity>
                )}
                
                {index < route.length - 1 && (
                  <TouchableOpacity
                    onPress={() => movePoint(point.id, 'down')}
                    style={RouteBuilderStyles.controlButton}
                  >
                    <Text style={RouteBuilderStyles.controlText}>‚Üì</Text>
                  </TouchableOpacity>
                )}
                
                {route.length > 2 && (
                  <TouchableOpacity
                    onPress={() => removeRoutePoint(point.id)}
                    style={[RouteBuilderStyles.controlButton, RouteBuilderStyles.deleteButton]}
                  >
                    <Text style={[RouteBuilderStyles.controlText, RouteBuilderStyles.deleteText]}>√ó</Text>
                  </TouchableOpacity>
                )}
              </View>
            </View>

            <TextInput
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ"
              value={point.address}
              onChangeText={(text) => updatePointAddress(point.id, text)}
              style={[
                RouteBuilderStyles.addressInput,
                isDark ? RouteBuilderStyles.addressInputDark : RouteBuilderStyles.addressInputLight
              ]}
              placeholderTextColor={isDark ? '#9CA3AF' : '#6B7280'}
            />

            {/* –õ–∏–Ω–∏—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ */}
            {index < route.length - 1 && (
              <View style={RouteBuilderStyles.connectionLine}>
                <Text style={RouteBuilderStyles.arrowDown}>‚Üì</Text>
              </View>
            )}
          </View>
        ))}
      </ScrollView>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <View style={RouteBuilderStyles.actions}>
        <Button
          title="+ –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å"
          onPress={addRoutePoint}
          variant="outline"
          style={RouteBuilderStyles.addButton}
          size="small"
        />

        <Button
          title={isCalculating ? "–†–∞—Å—á–µ—Ç..." : "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç"}
          onPress={calculateRoute}
          variant="primary"
          loading={isCalculating}
          disabled={route.filter(p => p.address.trim()).length < 2}
          style={RouteBuilderStyles.calculateButton}
        />
      </View>

      {/* –ò–Ω—Ñ–æ –æ –º–∞—Ä—à—Ä—É—Ç–µ */}
      <View style={[
        RouteBuilderStyles.routeInfo,
        isDark ? RouteBuilderStyles.routeInfoDark : RouteBuilderStyles.routeInfoLight
      ]}>
        <Text style={[
          RouteBuilderStyles.routeInfoText,
          isDark ? RouteBuilderStyles.routeInfoTextDark : RouteBuilderStyles.routeInfoTextLight
        ]}>
          üí° –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        </Text>
        <Text style={[
          RouteBuilderStyles.routeInfoText,
          isDark ? RouteBuilderStyles.routeInfoTextDark : RouteBuilderStyles.routeInfoTextLight
        ]}>
          üìç –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ —Ç–æ—á–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
        </Text>
      </View>
    </View>
  );
};

export default RouteBuilder; 