// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
console.log('üß™ –ü–†–ê–í–ò–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ì–õ–ê–°–ù–û –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò\n');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ GAMIFICATION_SYSTEM.md
const LEVELS_CONFIG = {
  "1.1": { levelKey: "starter", subLevel: 1, icon: "ü•â", bonus: 2, maxProgress: 30 },
  "1.2": { levelKey: "starter", subLevel: 2, icon: "ü•â", bonus: 3, maxProgress: 40 },
  "1.3": { levelKey: "starter", subLevel: 3, icon: "ü•â", bonus: 5, maxProgress: 50 },
  "2.1": { levelKey: "determined", subLevel: 1, icon: "ü•à", bonus: 8, maxProgress: 60 },
  "2.2": { levelKey: "determined", subLevel: 2, icon: "ü•à", bonus: 10, maxProgress: 80 },
  "2.3": { levelKey: "determined", subLevel: 3, icon: "ü•à", bonus: 15, maxProgress: 100 },
  "3.1": { levelKey: "reliable", subLevel: 1, icon: "ü•á", bonus: 20, maxProgress: 120 },
  "3.2": { levelKey: "reliable", subLevel: 2, icon: "ü•á", bonus: 25, maxProgress: 150 },
  "3.3": { levelKey: "reliable", subLevel: 3, icon: "ü•á", bonus: 35, maxProgress: 180 },
  "4.1": { levelKey: "champion", subLevel: 1, icon: "üèÜ", bonus: 50, maxProgress: 210 },
  "4.2": { levelKey: "champion", subLevel: 2, icon: "üèÜ", bonus: 65, maxProgress: 250 },
  "4.3": { levelKey: "champion", subLevel: 3, icon: "üèÜ", bonus: 85, maxProgress: 290 },
  "5.1": { levelKey: "superstar", subLevel: 1, icon: "‚≠ê", bonus: 120, maxProgress: 330 },
  "5.2": { levelKey: "superstar", subLevel: 2, icon: "‚≠ê", bonus: 150, maxProgress: 380 },
  "5.3": { levelKey: "superstar", subLevel: 3, icon: "‚≠ê", bonus: 200, maxProgress: 430 },
  "6.1": { levelKey: "emperor", subLevel: 1, icon: "üëë", bonus: 300, maxProgress: 480 },
  "6.2": { levelKey: "emperor", subLevel: 2, icon: "üëë", bonus: 400, maxProgress: 540 },
  "6.3": { levelKey: "emperor", subLevel: 3, icon: "üëë", bonus: 500, maxProgress: 600 },
};

const VIP_CONFIG = {
  levelKey: "vip",
  icon: "üíé",
  minRidesPerDay: 3,
  monthlyBonuses: { days20: 50, days25: 75, days30: 100 },
  quarterlyBonuses: { months3: 200, months6: 500, months12: 1000 },
  minDaysPerMonth: 20,
};

// –§—É–Ω–∫—Ü–∏–∏
const getLevelConfig = (level, subLevel) => {
  const key = `${level}.${subLevel}`;
  return LEVELS_CONFIG[key] || LEVELS_CONFIG["1.1"];
};

const isVIPLevel = (totalRides) => {
  return totalRides >= 4320;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –∏ –ø–æ–¥—É—Ä–æ–≤–Ω—è (–∫–æ–ø–∏—è –∏–∑ useEarningsLevel)
const calculateLevelAndSubLevel = (totalRides) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP —Å—Ç–∞—Ç—É—Å (4320+ –ø–æ–µ–∑–¥–æ–∫)
  if (isVIPLevel(totalRides)) {
    return {
      level: 7, // VIP —É—Ä–æ–≤–µ–Ω—å
      subLevel: 1,
      maxProgress: VIP_CONFIG.minDaysPerMonth,
      title: 'vip',
      subLevelTitle: 'VIP 1',
      icon: VIP_CONFIG.icon,
      nextReward: VIP_CONFIG.monthlyBonuses.days20.toString(),
    };
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –ø–æ–¥—É—Ä–æ–≤–µ–Ω—å –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–µ–∑–¥–æ–∫
  let accumulatedRides = 0;
  
  for (let level = 1; level <= 6; level++) {
    for (let subLevel = 1; subLevel <= 3; subLevel++) {
      const config = getLevelConfig(level, subLevel);
      const ridesInThisSubLevel = config.maxProgress;
      
      if (totalRides < accumulatedRides + ridesInThisSubLevel) {
        // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π –ø–æ–¥—É—Ä–æ–≤–µ–Ω—å
        const progressInSubLevel = totalRides - accumulatedRides;
        
        return {
          level,
          subLevel,
          maxProgress: ridesInThisSubLevel,
          title: config.levelKey,
          subLevelTitle: `${config.levelKey} ${subLevel}`,
          icon: config.icon,
          nextReward: config.bonus.toString(),
        };
      }
      
      accumulatedRides += ridesInThisSubLevel;
    }
  }
  
  // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
  const maxConfig = getLevelConfig(6, 3);
  return {
    level: 6,
    subLevel: 3,
    maxProgress: maxConfig.maxProgress,
    title: maxConfig.levelKey,
    subLevelTitle: `${maxConfig.levelKey} 3`,
    icon: maxConfig.icon,
    nextReward: maxConfig.bonus.toString(),
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–¥—É—Ä–æ–≤–Ω–µ
const calculateProgressInSubLevel = (totalRides, level, subLevel) => {
  let accumulatedRides = 0;
  
  // –°—É–º–º–∏—Ä—É–µ–º –ø–æ–µ–∑–¥–∫–∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥—É—Ä–æ–≤–Ω—è
  for (let l = 1; l < level; l++) {
    for (let s = 1; s <= 3; s++) {
      const config = getLevelConfig(l, s);
      accumulatedRides += config.maxProgress;
    }
  }
  
  for (let s = 1; s < subLevel; s++) {
    const config = getLevelConfig(level, s);
    accumulatedRides += config.maxProgress;
  }
  
  return totalRides - accumulatedRides;
};

console.log('üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –£–†–û–í–ù–ï–ô –°–û–ì–õ–ê–°–ù–û –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:');
Object.entries(LEVELS_CONFIG).forEach(([key, config]) => {
  console.log(`${key}: ${config.maxProgress} –ø–æ–µ–∑–¥–æ–∫, –±–æ–Ω—É—Å ${config.bonus} AFc`);
});

console.log('\nüéØ –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:');
console.log('='.repeat(50));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
const documentationTests = [
  { rides: 0, expected: '1.1', description: '–°—Ç–∞—Ä—Ç–µ—Ä 1 (0-30)' },
  { rides: 30, expected: '1.2', description: '–°—Ç–∞—Ä—Ç–µ—Ä 2 (31-70)' },
  { rides: 70, expected: '1.3', description: '–°—Ç–∞—Ä—Ç–µ—Ä 3 (71-120)' },
  { rides: 120, expected: '2.1', description: '–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π 1 (121-180)' },
  { rides: 180, expected: '2.2', description: '–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π 2 (181-260)' },
  { rides: 260, expected: '2.3', description: '–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π 3 (261-360)' },
  { rides: 360, expected: '3.1', description: '–ù–∞–¥–µ–∂–Ω—ã–π 1 (361-480)' },
  { rides: 480, expected: '3.2', description: '–ù–∞–¥–µ–∂–Ω—ã–π 2 (481-630)' },
  { rides: 630, expected: '3.3', description: '–ù–∞–¥–µ–∂–Ω—ã–π 3 (631-810)' },
  { rides: 810, expected: '4.1', description: '–ß–µ–º–ø–∏–æ–Ω 1 (811-1020)' },
  { rides: 1020, expected: '4.2', description: '–ß–µ–º–ø–∏–æ–Ω 2 (1021-1270)' },
  { rides: 1270, expected: '4.3', description: '–ß–µ–º–ø–∏–æ–Ω 3 (1271-1560)' },
  { rides: 1560, expected: '5.1', description: '–°—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞ 1 (1561-1890)' },
  { rides: 1890, expected: '5.2', description: '–°—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞ 2 (1891-2270)' },
  { rides: 2270, expected: '5.3', description: '–°—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞ 3 (2271-2700)' },
  { rides: 2700, expected: '6.1', description: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä 1 (2701-3180)' },
  { rides: 3180, expected: '6.2', description: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä 2 (3181-3720)' },
  { rides: 3720, expected: '6.3', description: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä 3 (3721-4320)' },
  { rides: 4320, expected: 'VIP', description: 'VIP –∞–∫—Ç–∏–≤–∞—Ü–∏—è (4320+)' },
];

documentationTests.forEach(test => {
  const result = calculateLevelAndSubLevel(test.rides);
  const actual = result.level === 7 ? 'VIP' : `${result.level}.${result.subLevel}`;
  const status = actual === test.expected ? '‚úÖ' : '‚ùå';
  console.log(`${status} ${test.description}: ${test.rides} –ø–æ–µ–∑–¥–æ–∫ ‚Üí ${actual} (–æ–∂–∏–¥–∞–ª–æ—Å—å ${test.expected})`);
});

console.log('\nüéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–•–û–î–û–í:');
console.log('='.repeat(50));

// –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
for (let rides = 0; rides <= 300; rides += 10) {
  const result = calculateLevelAndSubLevel(rides);
  const progress = calculateProgressInSubLevel(rides, result.level, result.subLevel);
  const levelName = result.level === 7 ? 'VIP' : `${result.level}.${result.subLevel}`;
  console.log(`${rides.toString().padStart(3)} –ø–æ–µ–∑–¥–æ–∫ ‚Üí ${levelName}, –ø—Ä–æ–≥—Ä–µ—Å—Å ${progress}/${result.maxProgress}`);
}

console.log('\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
